<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [LoRaWAN_4.6_L151\LoRaWAN_4.6_L151]</title></head>
<body><HR>
<H1>Static Call Graph for image LoRaWAN_4.6_L151\LoRaWAN_4.6_L151</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Oct 24 13:59:04 2022
<BR><P>
<H3>Maximum Stack Usage =       1104 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; lorawan_app &rArr; LmHandlerProcess &rArr; LoRaMacProcess &rArr; LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; ProcessMacCommands &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[133]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[53]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[53]">ADC1_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[b]">BoardGetBatteryLevel</a> from board.o(i.BoardGetBatteryLevel) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[c]">BoardGetRandomSeed</a> from board.o(i.BoardGetRandomSeed) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[3b]">BusFault_Handler</a> from stm32l1xx_it.o(i.BusFault_Handler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[74]">COMP_ACQ_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[57]">COMP_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[56]">DAC_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[4c]">DMA1_Channel1_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[4d]">DMA1_Channel2_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[4e]">DMA1_Channel3_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[4f]">DMA1_Channel4_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[50]">DMA1_Channel5_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[51]">DMA1_Channel6_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[52]">DMA1_Channel7_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[6f]">DMA2_Channel1_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[70]">DMA2_Channel2_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[71]">DMA2_Channel3_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[72]">DMA2_Channel4_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[73]">DMA2_Channel5_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[3e]">DebugMon_Handler</a> from stm32l1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[47]">EXTI0_IRQHandler</a> from gpio-board.o(i.EXTI0_IRQHandler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[68]">EXTI15_10_IRQHandler</a> from gpio-board.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[48]">EXTI1_IRQHandler</a> from gpio-board.o(i.EXTI1_IRQHandler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[49]">EXTI2_IRQHandler</a> from gpio-board.o(i.EXTI2_IRQHandler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[4a]">EXTI3_IRQHandler</a> from gpio-board.o(i.EXTI3_IRQHandler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[4b]">EXTI4_IRQHandler</a> from gpio-board.o(i.EXTI4_IRQHandler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[58]">EXTI9_5_IRQHandler</a> from gpio-board.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[45]">FLASH_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[39]">HardFault_Handler</a> from stm32l1xx_it.o(i.HardFault_Handler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[60]">I2C1_ER_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[5f]">I2C1_EV_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[62]">I2C2_ER_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[61]">I2C2_EV_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[a2]">LmHandlerDeviceTimeReq</a> from lmhandler.o(i.LmHandlerDeviceTimeReq) referenced from lmhandler.o(i.LmHandlerPackageRegister)
 <LI><a href="#[a1]">LmHandlerJoinRequest</a> from lmhandler.o(i.LmHandlerJoinRequest) referenced from lmhandler.o(i.LmHandlerPackageRegister)
 <LI><a href="#[1b]">LmhpClockSyncInit</a> from lmhpclocksync.o(i.LmhpClockSyncInit) referenced 2 times from lmhpclocksync.o(.data)
 <LI><a href="#[1c]">LmhpClockSyncIsInitialized</a> from lmhpclocksync.o(i.LmhpClockSyncIsInitialized) referenced 2 times from lmhpclocksync.o(.data)
 <LI><a href="#[1d]">LmhpClockSyncIsTxPending</a> from lmhpclocksync.o(i.LmhpClockSyncIsTxPending) referenced 2 times from lmhpclocksync.o(.data)
 <LI><a href="#[1f]">LmhpClockSyncOnMcpsConfirm</a> from lmhpclocksync.o(i.LmhpClockSyncOnMcpsConfirm) referenced 2 times from lmhpclocksync.o(.data)
 <LI><a href="#[20]">LmhpClockSyncOnMcpsIndication</a> from lmhpclocksync.o(i.LmhpClockSyncOnMcpsIndication) referenced 2 times from lmhpclocksync.o(.data)
 <LI><a href="#[1e]">LmhpClockSyncProcess</a> from lmhpclocksync.o(i.LmhpClockSyncProcess) referenced 2 times from lmhpclocksync.o(.data)
 <LI><a href="#[21]">LmhpComplianceInit</a> from lmhpcompliance.o(i.LmhpComplianceInit) referenced 2 times from lmhpcompliance.o(.data)
 <LI><a href="#[22]">LmhpComplianceIsInitialized</a> from lmhpcompliance.o(i.LmhpComplianceIsInitialized) referenced 2 times from lmhpcompliance.o(.data)
 <LI><a href="#[23]">LmhpComplianceIsTxPending</a> from lmhpcompliance.o(i.LmhpComplianceIsTxPending) referenced 2 times from lmhpcompliance.o(.data)
 <LI><a href="#[25]">LmhpComplianceOnMcpsIndication</a> from lmhpcompliance.o(i.LmhpComplianceOnMcpsIndication) referenced 2 times from lmhpcompliance.o(.data)
 <LI><a href="#[26]">LmhpComplianceOnMlmeConfirm</a> from lmhpcompliance.o(i.LmhpComplianceOnMlmeConfirm) referenced 2 times from lmhpcompliance.o(.data)
 <LI><a href="#[27]">LmhpComplianceOnMlmeIndication</a> from lmhpcompliance.o(i.LmhpComplianceOnMlmeIndication) referenced 2 times from lmhpcompliance.o(.data)
 <LI><a href="#[24]">LmhpComplianceProcess</a> from lmhpcompliance.o(i.LmhpComplianceProcess) referenced 2 times from lmhpcompliance.o(.data)
 <LI><a href="#[28]">LmhpFragmentationInit</a> from lmhpfragmentation.o(i.LmhpFragmentationInit) referenced 2 times from lmhpfragmentation.o(.data)
 <LI><a href="#[29]">LmhpFragmentationIsInitialized</a> from lmhpfragmentation.o(i.LmhpFragmentationIsInitialized) referenced 2 times from lmhpfragmentation.o(.data)
 <LI><a href="#[2a]">LmhpFragmentationIsTxPending</a> from lmhpfragmentation.o(i.LmhpFragmentationIsTxPending) referenced 2 times from lmhpfragmentation.o(.data)
 <LI><a href="#[2c]">LmhpFragmentationOnMcpsIndication</a> from lmhpfragmentation.o(i.LmhpFragmentationOnMcpsIndication) referenced 2 times from lmhpfragmentation.o(.data)
 <LI><a href="#[2b]">LmhpFragmentationProcess</a> from lmhpfragmentation.o(i.LmhpFragmentationProcess) referenced 2 times from lmhpfragmentation.o(.data)
 <LI><a href="#[2d]">LmhpRemoteMcastSetupInit</a> from lmhpremotemcastsetup.o(i.LmhpRemoteMcastSetupInit) referenced 2 times from lmhpremotemcastsetup.o(.data)
 <LI><a href="#[2e]">LmhpRemoteMcastSetupIsInitialized</a> from lmhpremotemcastsetup.o(i.LmhpRemoteMcastSetupIsInitialized) referenced 2 times from lmhpremotemcastsetup.o(.data)
 <LI><a href="#[2f]">LmhpRemoteMcastSetupIsTxPending</a> from lmhpremotemcastsetup.o(i.LmhpRemoteMcastSetupIsTxPending) referenced 2 times from lmhpremotemcastsetup.o(.data)
 <LI><a href="#[31]">LmhpRemoteMcastSetupOnMcpsIndication</a> from lmhpremotemcastsetup.o(i.LmhpRemoteMcastSetupOnMcpsIndication) referenced 2 times from lmhpremotemcastsetup.o(.data)
 <LI><a href="#[30]">LmhpRemoteMcastSetupProcess</a> from lmhpremotemcastsetup.o(i.LmhpRemoteMcastSetupProcess) referenced 2 times from lmhpremotemcastsetup.o(.data)
 <LI><a href="#[9c]">McpsConfirm</a> from lmhandler.o(i.McpsConfirm) referenced from lmhandler.o(i.LmHandlerInit)
 <LI><a href="#[9d]">McpsIndication</a> from lmhandler.o(i.McpsIndication) referenced from lmhandler.o(i.LmHandlerInit)
 <LI><a href="#[3a]">MemManage_Handler</a> from stm32l1xx_it.o(i.MemManage_Handler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[9e]">MlmeConfirm</a> from lmhandler.o(i.MlmeConfirm) referenced from lmhandler.o(i.LmHandlerInit)
 <LI><a href="#[9f]">MlmeIndication</a> from lmhandler.o(i.MlmeIndication) referenced from lmhandler.o(i.LmHandlerInit)
 <LI><a href="#[38]">NMI_Handler</a> from stm32l1xx_it.o(i.NMI_Handler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[a0]">NvmDataMgmtEvent</a> from nvmdatamgmt.o(i.NvmDataMgmtEvent) referenced from lmhandler.o(i.LmHandlerInit)
 <LI><a href="#[16]">OnBeaconStatusChange</a> from lorawan_app.o(i.OnBeaconStatusChange) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[15]">OnClassChange</a> from lorawan_app.o(i.OnClassChange) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[ad]">OnForceRejoinReqCycleTimerEvent</a> from loramac.o(i.OnForceRejoinReqCycleTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[a3]">OnFragmentTxDelay</a> from lmhpfragmentation.o(i.OnFragmentTxDelay) referenced from lmhpfragmentation.o(i.LmhpFragmentationInit)
 <LI><a href="#[12]">OnJoinRequest</a> from lorawan_app.o(i.OnJoinRequest) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[b5]">OnLed1TimerEvent</a> from lorawan_app.o(i.OnLed1TimerEvent) referenced from lorawan_app.o(i.lorawan_app)
 <LI><a href="#[b6]">OnLed2TimerEvent</a> from lorawan_app.o(i.OnLed2TimerEvent) referenced from lorawan_app.o(i.lorawan_app)
 <LI><a href="#[b7]">OnLedBeaconTimerEvent</a> from lorawan_app.o(i.OnLedBeaconTimerEvent) referenced from lorawan_app.o(i.lorawan_app)
 <LI><a href="#[10]">OnMacMcpsRequest</a> from lorawan_app.o(i.OnMacMcpsRequest) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[11]">OnMacMlmeRequest</a> from lorawan_app.o(i.OnMacMlmeRequest) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[d]">OnMacProcessNotify</a> from lorawan_app.o(i.OnMacProcessNotify) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[f]">OnNetworkParametersChange</a> from lorawan_app.o(i.OnNetworkParametersChange) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[e]">OnNvmDataChange</a> from lorawan_app.o(i.OnNvmDataChange) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[1a]">OnPingSlotPeriodicityChanged</a> from lorawan_app.o(i.OnPingSlotPeriodicityChanged) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[af]">OnRadioRxDone</a> from loramac.o(i.OnRadioRxDone) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[b0]">OnRadioRxError</a> from loramac.o(i.OnRadioRxError) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[b2]">OnRadioRxTimeout</a> from loramac.o(i.OnRadioRxTimeout) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[ae]">OnRadioTxDone</a> from loramac.o(i.OnRadioTxDone) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[b1]">OnRadioTxTimeout</a> from loramac.o(i.OnRadioTxTimeout) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[aa]">OnRejoin0CycleTimerEvent</a> from loramac.o(i.OnRejoin0CycleTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[ab]">OnRejoin1CycleTimerEvent</a> from loramac.o(i.OnRejoin1CycleTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[ac]">OnRejoin2CycleTimerEvent</a> from loramac.o(i.OnRejoin2CycleTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[a9]">OnRetransmitTimeoutTimerEvent</a> from loramac.o(i.OnRetransmitTimeoutTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[14]">OnRxData</a> from lorawan_app.o(i.OnRxData) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[a7]">OnRxWindow1TimerEvent</a> from loramac.o(i.OnRxWindow1TimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[a8]">OnRxWindow2TimerEvent</a> from loramac.o(i.OnRxWindow2TimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[a4]">OnSessionStartTimer</a> from lmhpremotemcastsetup.o(i.OnSessionStartTimer) referenced from lmhpremotemcastsetup.o(i.LmhpRemoteMcastSetupInit)
 <LI><a href="#[a5]">OnSessionStopTimer</a> from lmhpremotemcastsetup.o(i.OnSessionStopTimer) referenced from lmhpremotemcastsetup.o(i.LmhpRemoteMcastSetupInit)
 <LI><a href="#[17]">OnSysTimeUpdate</a> from lorawan_app.o(i.OnSysTimeUpdate) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[13]">OnTxData</a> from lorawan_app.o(i.OnTxData) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[a6]">OnTxDelayedTimerEvent</a> from loramac.o(i.OnTxDelayedTimerEvent) referenced from loramac.o(i.LoRaMacInitialization)
 <LI><a href="#[19]">OnTxFrameCtrlChanged</a> from lorawan_app.o(i.OnTxFrameCtrlChanged) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[18]">OnTxPeriodicityChanged</a> from lorawan_app.o(i.OnTxPeriodicityChanged) referenced 2 times from lorawan_app.o(.data)
 <LI><a href="#[b4]">OnTxTimerEvent</a> from lorawan_app.o(i.OnTxTimerEvent) referenced from lorawan_app.o(i.StartTxProcess)
 <LI><a href="#[42]">PVD_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[3f]">PendSV_Handler</a> from stm32l1xx_it.o(i.PendSV_Handler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[46]">RCC_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[69]">RTC_Alarm_IRQHandler</a> from rtc-board.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[44]">RTC_WKUP_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[7c]">RegionCN470A20GetBeaconChannelOffset</a> from regioncn470a20.o(i.RegionCN470A20GetBeaconChannelOffset) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[7b]">RegionCN470A20GetDownlinkFrequency</a> from regioncn470a20.o(i.RegionCN470A20GetDownlinkFrequency) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[81]">RegionCN470A20GetRx1Frequency</a> from regioncn470a20.o(i.RegionCN470A20GetRx1Frequency) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[82]">RegionCN470A20GetRx2Frequency</a> from regioncn470a20.o(i.RegionCN470A20GetRx2Frequency) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[7f]">RegionCN470A20InitializeChannels</a> from regioncn470a20.o(i.RegionCN470A20InitializeChannels) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[80]">RegionCN470A20InitializeChannelsMask</a> from regioncn470a20.o(i.RegionCN470A20InitializeChannelsMask) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[7d]">RegionCN470A20LinkAdrChMaskUpdate</a> from regioncn470a20.o(i.RegionCN470A20LinkAdrChMaskUpdate) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[7e]">RegionCN470A20VerifyRfFreq</a> from regioncn470a20.o(i.RegionCN470A20VerifyRfFreq) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[8c]">RegionCN470A26GetBeaconChannelOffset</a> from regioncn470a26.o(i.RegionCN470A26GetBeaconChannelOffset) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[8b]">RegionCN470A26GetDownlinkFrequency</a> from regioncn470a26.o(i.RegionCN470A26GetDownlinkFrequency) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[91]">RegionCN470A26GetRx1Frequency</a> from regioncn470a26.o(i.RegionCN470A26GetRx1Frequency) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[92]">RegionCN470A26GetRx2Frequency</a> from regioncn470a26.o(i.RegionCN470A26GetRx2Frequency) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[8f]">RegionCN470A26InitializeChannels</a> from regioncn470a26.o(i.RegionCN470A26InitializeChannels) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[90]">RegionCN470A26InitializeChannelsMask</a> from regioncn470a26.o(i.RegionCN470A26InitializeChannelsMask) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[8d]">RegionCN470A26LinkAdrChMaskUpdate</a> from regioncn470a26.o(i.RegionCN470A26LinkAdrChMaskUpdate) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[8e]">RegionCN470A26VerifyRfFreq</a> from regioncn470a26.o(i.RegionCN470A26VerifyRfFreq) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[84]">RegionCN470B20GetBeaconChannelOffset</a> from regioncn470b20.o(i.RegionCN470B20GetBeaconChannelOffset) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[83]">RegionCN470B20GetDownlinkFrequency</a> from regioncn470b20.o(i.RegionCN470B20GetDownlinkFrequency) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[89]">RegionCN470B20GetRx1Frequency</a> from regioncn470b20.o(i.RegionCN470B20GetRx1Frequency) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[8a]">RegionCN470B20GetRx2Frequency</a> from regioncn470b20.o(i.RegionCN470B20GetRx2Frequency) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[87]">RegionCN470B20InitializeChannels</a> from regioncn470b20.o(i.RegionCN470B20InitializeChannels) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[88]">RegionCN470B20InitializeChannelsMask</a> from regioncn470b20.o(i.RegionCN470B20InitializeChannelsMask) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[85]">RegionCN470B20LinkAdrChMaskUpdate</a> from regioncn470b20.o(i.RegionCN470B20LinkAdrChMaskUpdate) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[86]">RegionCN470B20VerifyRfFreq</a> from regioncn470b20.o(i.RegionCN470B20VerifyRfFreq) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[94]">RegionCN470B26GetBeaconChannelOffset</a> from regioncn470b26.o(i.RegionCN470B26GetBeaconChannelOffset) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[93]">RegionCN470B26GetDownlinkFrequency</a> from regioncn470b26.o(i.RegionCN470B26GetDownlinkFrequency) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[99]">RegionCN470B26GetRx1Frequency</a> from regioncn470b26.o(i.RegionCN470B26GetRx1Frequency) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[9a]">RegionCN470B26GetRx2Frequency</a> from regioncn470b26.o(i.RegionCN470B26GetRx2Frequency) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[97]">RegionCN470B26InitializeChannels</a> from regioncn470b26.o(i.RegionCN470B26InitializeChannels) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[98]">RegionCN470B26InitializeChannelsMask</a> from regioncn470b26.o(i.RegionCN470B26InitializeChannelsMask) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[95]">RegionCN470B26LinkAdrChMaskUpdate</a> from regioncn470b26.o(i.RegionCN470B26LinkAdrChMaskUpdate) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[96]">RegionCN470B26VerifyRfFreq</a> from regioncn470b26.o(i.RegionCN470B26VerifyRfFreq) referenced from regioncn470.o(i.ApplyChannelPlanConfig)
 <LI><a href="#[37]">Reset_Handler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[63]">SPI1_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[64]">SPI2_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[6e]">SPI3_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[3d]">SVC_Handler</a> from stm32l1xx_it.o(i.SVC_Handler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[c0]">SX1276CheckRfFrequency</a> from sx1276mb1mas-board.o(i.SX1276CheckRfFrequency) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[b9]">SX1276GetStatus</a> from sx1276.o(i.SX1276GetStatus) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[c1]">SX1276GetTimeOnAir</a> from sx1276.o(i.SX1276GetTimeOnAir) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[cf]">SX1276GetWakeupTime</a> from sx1276.o(i.SX1276GetWakeupTime) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[b8]">SX1276Init</a> from sx1276.o(i.SX1276Init) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[bc]">SX1276IsChannelFree</a> from sx1276.o(i.SX1276IsChannelFree) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[32]">SX1276OnDio0Irq</a> from sx1276.o(i.SX1276OnDio0Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[33]">SX1276OnDio1Irq</a> from sx1276.o(i.SX1276OnDio1Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[34]">SX1276OnDio2Irq</a> from sx1276.o(i.SX1276OnDio2Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[35]">SX1276OnDio3Irq</a> from sx1276.o(i.SX1276OnDio3Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[36]">SX1276OnDio4Irq</a> from sx1276.o(i.SX1276OnDio4Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[b3]">SX1276OnTimeoutIrq</a> from sx1276.o(i.SX1276OnTimeoutIrq) referenced from sx1276.o(i.SX1276Init)
 <LI><a href="#[bd]">SX1276Random</a> from sx1276.o(i.SX1276Random) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[ca]">SX1276Read</a> from sx1276.o(i.SX1276Read) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[cc]">SX1276ReadBuffer</a> from sx1276.o(i.SX1276ReadBuffer) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[c8]">SX1276ReadRssi</a> from sx1276.o(i.SX1276ReadRssi) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[c2]">SX1276Send</a> from sx1276.o(i.SX1276Send) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[bb]">SX1276SetChannel</a> from sx1276.o(i.SX1276SetChannel) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[cd]">SX1276SetMaxPayloadLength</a> from sx1276.o(i.SX1276SetMaxPayloadLength) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[ba]">SX1276SetModem</a> from sx1276.o(i.SX1276SetModem) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[ce]">SX1276SetPublicNetwork</a> from sx1276.o(i.SX1276SetPublicNetwork) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[c5]">SX1276SetRx</a> from sx1276.o(i.SX1276SetRx) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[be]">SX1276SetRxConfig</a> from sx1276.o(i.SX1276SetRxConfig) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[c3]">SX1276SetSleep</a> from sx1276.o(i.SX1276SetSleep) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[c4]">SX1276SetStby</a> from sx1276.o(i.SX1276SetStby) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[bf]">SX1276SetTxConfig</a> from sx1276.o(i.SX1276SetTxConfig) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[c7]">SX1276SetTxContinuousWave</a> from sx1276.o(i.SX1276SetTxContinuousWave) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[c6]">SX1276StartCad</a> from sx1276.o(i.SX1276StartCad) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[c9]">SX1276Write</a> from sx1276.o(i.SX1276Write) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[cb]">SX1276WriteBuffer</a> from sx1276.o(i.SX1276WriteBuffer) referenced from sx1276mb1mas-board.o(.constdata)
 <LI><a href="#[40]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[75]">SystemInit</a> from system_stm32l1xx.o(i.SystemInit) referenced from startup_stm32l151xc.o(.text)
 <LI><a href="#[43]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[5a]">TIM10_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[5b]">TIM11_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[5c]">TIM2_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[5d]">TIM3_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[5e]">TIM4_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[6d]">TIM5_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[6b]">TIM6_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[6c]">TIM7_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[59]">TIM9_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[9b]">UART_DMAAbortOnError</a> from stm32l1xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l1xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[65]">USART1_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[66]">USART2_IRQHandler</a> from uart-board.o(i.USART2_IRQHandler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[67]">USART3_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[6a]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[54]">USB_HP_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[55]">USB_LP_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[3c]">UsageFault_Handler</a> from stm32l1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[41]">WWDG_IRQHandler</a> from startup_stm32l151xc.o(.text) referenced from startup_stm32l151xc.o(RESET)
 <LI><a href="#[d0]">__main</a> from __main.o(!!!main) referenced from startup_stm32l151xc.o(.text)
 <LI><a href="#[7a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[78]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[77]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[79]">fputc</a> from board.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[d0]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d1]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d3]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[39f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3a0]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3a1]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3a2]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3a3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[d4]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[11a]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[d6]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[d8]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[da]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[db]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[dc]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[3a4]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[de]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e0]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e1]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e2]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[e4]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[e6]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e8]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e9]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[ea]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[ec]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[3a5]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[ee]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[f0]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[f2]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[f4]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[3a6]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[104]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[3a7]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3a8]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[3a9]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[3aa]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[3ab]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3ac]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[3ad]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[3ae]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[3af]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[3b0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[3b1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[3b2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[3b3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[3b4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[3b5]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[3b6]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[3b7]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[3b8]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[3b9]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[3ba]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[3bb]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[109]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[3bc]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[3bd]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[3be]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[3bf]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[3c0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[3c1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3c2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[3c3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[d2]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[3c4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[101]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[103]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[3c5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[105]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; lorawan_app &rArr; LmHandlerProcess &rArr; LoRaMacProcess &rArr; LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; ProcessMacCommands &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3c6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[13b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[108]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[3c7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[10a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[37]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[3c8]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[53]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>COMP_ACQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l151xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32l151xc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1f8]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcMs2Tick
</UL>

<P><STRONG><a name="[3c9]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_printf
</UL>

<P><STRONG><a name="[10f]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CliProcess
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupOnMcpsIndication
</UL>

<P><STRONG><a name="[112]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[113]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[111]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[df]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[117]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[e5]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[ed]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[d7]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[118]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeIndication
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRxUpdate
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcChannelSetup
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcChannelDelete
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupOnMcpsIndication
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpFragmentationOnMcpsIndication
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMlmeIndication
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470A20GetRx2Frequency
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470InitDefaults
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartAlarm
</UL>

<P><STRONG><a name="[3ca]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3cb]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[3cd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[3d0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[115]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[116]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d5]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[10d]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[10e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[77]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[ef]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[f1]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[110]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[11d]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[e7]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[120]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[e3]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[eb]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[11f]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[3d1]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[129]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[12a]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[f3]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[f5]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[11c]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[fe]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[100]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[11e]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[102]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[131]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[f9]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[130]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[128]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[122]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[12e]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[12c]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[137]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[12f]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[3d2]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12d]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[3d3]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3d4]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[3d5]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[3d6]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[140]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[f7]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[138]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[136]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[3d7]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[147]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[139]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[14a]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[13d]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[13c]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[10b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[142]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[9]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[144]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[3d8]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[141]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[14d]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[3d9]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[3db]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[123]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[150]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[14f]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[151]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[152]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[124]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[125]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[153]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[154]"></a>AES_CMAC_Final</STRONG> (Thumb, 442 bytes, Stack size 48 bytes, cmac.o(i.AES_CMAC_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[158]"></a>AES_CMAC_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cmac.o(i.AES_CMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AES_CMAC_Init &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[159]"></a>AES_CMAC_SetKey</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmac.o(i.AES_CMAC_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AES_CMAC_SetKey &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[15b]"></a>AES_CMAC_Update</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, cmac.o(i.AES_CMAC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[162]"></a>BoardBatteryMeasureVoltage</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, board.o(i.BoardBatteryMeasureVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetBatteryLevel
</UL>

<P><STRONG><a name="[174]"></a>BoardCriticalSectionBegin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board.o(i.BoardCriticalSectionBegin))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UplinkProcess
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupProcess
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpFragmentationProcess
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardResetMcu
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmSetOffMode
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmExitStopMode
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterStopMode
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuPutChar
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuGetChar
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuWriteBuffer
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmSetStopMode
</UL>

<P><STRONG><a name="[1b1]"></a>BoardCriticalSectionEnd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board.o(i.BoardCriticalSectionEnd))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UplinkProcess
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupProcess
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpFragmentationProcess
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmSetOffMode
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmExitStopMode
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterStopMode
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuPutChar
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuGetChar
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuWriteBuffer
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmSetStopMode
</UL>

<P><STRONG><a name="[15f]"></a>BoardDeInitMcu</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, board.o(i.BoardDeInitMcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = BoardDeInitMcu &rArr; SpiDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDeInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterStopMode
</UL>

<P><STRONG><a name="[b]"></a>BoardGetBatteryLevel</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, board.o(i.BoardGetBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BoardGetBatteryLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBoardPowerSource
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardBatteryMeasureVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>BoardGetRandomSeed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, board.o(i.BoardGetRandomSeed))
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[164]"></a>BoardInitMcu</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, board.o(i.BoardInitMcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = BoardInitMcu &rArr; UartInit &rArr; UartMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoTcxoInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDbgInit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmSetOffMode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBoardPowerSource
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockReConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardUnusedIoInit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmExitStopMode
</UL>

<P><STRONG><a name="[386]"></a>BoardInitPeriph</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, board.o(i.BoardInitPeriph))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
</UL>

<P><STRONG><a name="[171]"></a>BoardLowPowerHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board.o(i.BoardLowPowerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = BoardLowPowerHandler &rArr; LpmEnterLowPower &rArr; LpmExitStopMode &rArr; BoardInitMcu &rArr; UartInit &rArr; UartMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
</UL>

<P><STRONG><a name="[173]"></a>BoardResetMcu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, board.o(i.BoardResetMcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BoardResetMcu
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceProcess
</UL>

<P><STRONG><a name="[3b]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[178]"></a>CayenneLppAddAnalogInput</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, cayennelpp.o(i.CayenneLppAddAnalogInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CayenneLppAddAnalogInput &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
</UL>

<P><STRONG><a name="[2e9]"></a>CayenneLppAddDigitalInput</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, cayennelpp.o(i.CayenneLppAddDigitalInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CayenneLppAddDigitalInput
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
</UL>

<P><STRONG><a name="[17b]"></a>CayenneLppCopy</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cayennelpp.o(i.CayenneLppCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CayenneLppCopy &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
</UL>

<P><STRONG><a name="[2eb]"></a>CayenneLppGetSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cayennelpp.o(i.CayenneLppGetSize))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
</UL>

<P><STRONG><a name="[2e8]"></a>CayenneLppReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cayennelpp.o(i.CayenneLppReset))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
</UL>

<P><STRONG><a name="[186]"></a>CliProcess</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cli.o(i.CliProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = CliProcess &rArr; NvmDataMgmtFactoryReset &rArr; NvmmReset &rArr; EepromMcuWriteBuffer &rArr; HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_DATAEEPROM_ProgramWord &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtFactoryReset
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetChar
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
</UL>

<P><STRONG><a name="[29e]"></a>Crc32</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, utilities.o(i.Crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreNvmData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleNvm
</UL>

<P><STRONG><a name="[2e0]"></a>Crc32Finalize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utilities.o(i.Crc32Finalize))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmmCrc32Check
</UL>

<P><STRONG><a name="[2de]"></a>Crc32Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utilities.o(i.Crc32Init))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmmCrc32Check
</UL>

<P><STRONG><a name="[2df]"></a>Crc32Update</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, utilities.o(i.Crc32Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Crc32Update
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmmCrc32Check
</UL>

<P><STRONG><a name="[3e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[193]"></a>DelayMs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, delay.o(i.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DelayMs &rArr; DelayMsMcu &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsMcu
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[194]"></a>DelayMsMcu</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, delay-board.o(i.DelayMsMcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DelayMsMcu &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[2ff]"></a>DetermineFrameType</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, loramac.o(i.DetermineFrameType))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[19b]"></a>DisplayAppInfo</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lmhandlermsgdisplay.o(i.DisplayAppInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DisplayAppInfo &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
</UL>

<P><STRONG><a name="[19d]"></a>DisplayBeaconUpdate</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, lmhandlermsgdisplay.o(i.DisplayBeaconUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = DisplayBeaconUpdate &rArr; PrintHexBuffer &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_printf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHexBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnBeaconStatusChange
</UL>

<P><STRONG><a name="[19f]"></a>DisplayClassUpdate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lmhandlermsgdisplay.o(i.DisplayClassUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DisplayClassUpdate &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnClassChange
</UL>

<P><STRONG><a name="[1a0]"></a>DisplayJoinRequestUpdate</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lmhandlermsgdisplay.o(i.DisplayJoinRequestUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DisplayJoinRequestUpdate &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJoinRequest
</UL>

<P><STRONG><a name="[1a1]"></a>DisplayMacMcpsRequestUpdate</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lmhandlermsgdisplay.o(i.DisplayMacMcpsRequestUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DisplayMacMcpsRequestUpdate &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacMcpsRequest
</UL>

<P><STRONG><a name="[1a2]"></a>DisplayMacMlmeRequestUpdate</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, lmhandlermsgdisplay.o(i.DisplayMacMlmeRequestUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DisplayMacMlmeRequestUpdate &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacMlmeRequest
</UL>

<P><STRONG><a name="[1a3]"></a>DisplayNetworkParametersUpdate</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lmhandlermsgdisplay.o(i.DisplayNetworkParametersUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DisplayNetworkParametersUpdate &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnNetworkParametersChange
</UL>

<P><STRONG><a name="[1a4]"></a>DisplayNvmDataChange</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lmhandlermsgdisplay.o(i.DisplayNvmDataChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DisplayNvmDataChange &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnNvmDataChange
</UL>

<P><STRONG><a name="[1a5]"></a>DisplayRxUpdate</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, lmhandlermsgdisplay.o(i.DisplayRxUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = DisplayRxUpdate &rArr; PrintHexBuffer &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_printf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHexBuffer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxData
</UL>

<P><STRONG><a name="[1a7]"></a>DisplayTxUpdate</STRONG> (Thumb, 330 bytes, Stack size 56 bytes, lmhandlermsgdisplay.o(i.DisplayTxUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = DisplayTxUpdate &rArr; PrintHexBuffer &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_printf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHexBuffer
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetCurrentClass
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetActiveRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxData
</UL>

<P><STRONG><a name="[47]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[1ac]"></a>EepromMcuReadBuffer</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, eeprom-board.o(i.EepromMcuReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = EepromMcuReadBuffer &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmmRead
</UL>

<P><STRONG><a name="[1ae]"></a>EepromMcuWriteBuffer</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, eeprom-board.o(i.EepromMcuWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = EepromMcuWriteBuffer &rArr; HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_DATAEEPROM_ProgramWord &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmmWrite
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmmReset
</UL>

<P><STRONG><a name="[2d3]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1b4]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32l1xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_ProgramWord
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_ProgramHalfWord
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_ProgramByte
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_FastProgramWord
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_FastProgramHalfWord
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_FastProgramByte
</UL>

<P><STRONG><a name="[166]"></a>FifoInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fifo.o(i.FifoInit))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[1be]"></a>FifoPop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fifo.o(i.FifoPop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuGetChar
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[1c0]"></a>FifoPush</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fifo.o(i.FifoPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuPutChar
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[259]"></a>FragDecoderGetMaxFileSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fragdecoder.o(i.FragDecoderGetMaxFileSize))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpFragmentationOnMcpsIndication
</UL>

<P><STRONG><a name="[258]"></a>FragDecoderGetStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fragdecoder.o(i.FragDecoderGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpFragmentationOnMcpsIndication
</UL>

<P><STRONG><a name="[25a]"></a>FragDecoderInit</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fragdecoder.o(i.FragDecoderInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FragDecoderInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpFragmentationOnMcpsIndication
</UL>

<P><STRONG><a name="[1c1]"></a>FragDecoderProcess</STRONG> (Thumb, 674 bytes, Stack size 104 bytes, fragdecoder.o(i.FragDecoderProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FragDecoderProcess &rArr; XorParityLine &rArr; SetParity
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorParityLine
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorDataLine
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRow
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParity
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRow
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParity
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragPushLineToBinaryMatrix
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragGetParityMatrixRow
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragFindMissingIndex
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragFindMissingFrags
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragExtractLineFromBinaryMatrix
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitArrayIsAllZeros
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitArrayFindFirstOne
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpFragmentationOnMcpsIndication
</UL>

<P><STRONG><a name="[163]"></a>GetBoardPowerSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board.o(i.GetBoardPowerSource))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetBatteryLevel
</UL>

<P><STRONG><a name="[165]"></a>GpioInit</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, gpio.o(i.GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDeInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuInit
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwInit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwDeInit
</UL>

<P><STRONG><a name="[1d8]"></a>GpioMcuInit</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, gpio-board.o(i.GpioMcuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>

<P><STRONG><a name="[1db]"></a>GpioMcuRead</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gpio-board.o(i.GpioMcuRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GpioMcuRead &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioRead
</UL>

<P><STRONG><a name="[1dd]"></a>GpioMcuSetInterrupt</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, gpio-board.o(i.GpioMcuSetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = GpioMcuSetInterrupt &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
</UL>

<P><STRONG><a name="[1d9]"></a>GpioMcuWrite</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gpio-board.o(i.GpioMcuWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuInit
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>

<P><STRONG><a name="[1e1]"></a>GpioRead</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio.o(i.GpioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GpioRead &rArr; GpioMcuRead &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuRead
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetDio1PinState
</UL>

<P><STRONG><a name="[1e2]"></a>GpioSetInterrupt</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, gpio.o(i.GpioSetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = GpioSetInterrupt &rArr; GpioMcuSetInterrupt &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuSetInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
</UL>

<P><STRONG><a name="[1e3]"></a>GpioWrite</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gpio.o(i.GpioWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GpioWrite &rArr; GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLedBeaconTimerEvent
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed2TimerEvent
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed1TimerEvent
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
</UL>

<P><STRONG><a name="[1e4]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 888 bytes, Stack size 24 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_ADC_Init</STRONG> (Thumb, 980 bytes, Stack size 24 bytes, stm32l1xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[175]"></a>HAL_DBGMCU_EnableDBGSleepMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_DBGMCU_EnableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardUnusedIoInit
</UL>

<P><STRONG><a name="[177]"></a>HAL_DBGMCU_EnableDBGStandbyMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_DBGMCU_EnableDBGStandbyMode))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardUnusedIoInit
</UL>

<P><STRONG><a name="[176]"></a>HAL_DBGMCU_EnableDBGStopMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_DBGMCU_EnableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardUnusedIoInit
</UL>

<P><STRONG><a name="[217]"></a>HAL_DMA_Abort</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32l1xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[216]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[195]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsMcu
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_FLASHEx_DATAEEPROM_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuWriteBuffer
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_FLASHEx_DATAEEPROM_Program</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32l1xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_DATAEEPROM_ProgramWord &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_ProgramWord
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_ProgramHalfWord
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_ProgramByte
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_FastProgramWord
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_FastProgramHalfWord
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_FastProgramByte
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuWriteBuffer
</UL>

<P><STRONG><a name="[1af]"></a>HAL_FLASHEx_DATAEEPROM_Unlock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l1xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuWriteBuffer
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_GPIO_DeInit &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio-board.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[1da]"></a>HAL_GPIO_Init</STRONG> (Thumb, 724 bytes, Stack size 32 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuSetInterrupt
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuInit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_GPIO_ReadPin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuRead
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_GPIO_WritePin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[369]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_InitTick</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1ec]"></a>HAL_MspInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32l1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1df]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuSetInterrupt
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
</UL>

<P><STRONG><a name="[1de]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HAL_NVIC_SetPriority &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuSetInterrupt
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2d0]"></a>HAL_PWREx_EnableFastWakeUp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_hal_pwr_ex.o(i.HAL_PWREx_EnableFastWakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterStopMode
</UL>

<P><STRONG><a name="[2cf]"></a>HAL_PWREx_EnableUltraLowPower</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_hal_pwr_ex.o(i.HAL_PWREx_EnableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterStopMode
</UL>

<P><STRONG><a name="[2ce]"></a>HAL_PWR_DisablePVD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_hal_pwr.o(i.HAL_PWR_DisablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterStopMode
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32l1xx_hal_pwr.o(i.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_PWR_EnterSLEEPMode &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterSleepMode
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32l1xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_PWR_EnterSTOPMode &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterStopMode
</UL>

<P><STRONG><a name="[36b]"></a>HAL_RCCEx_EnableLSECSS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_hal_rcc_ex.o(i.HAL_RCCEx_EnableLSECSS))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1f2]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, stm32l1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 734 bytes, Stack size 24 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1f6]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1f4]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2094 bytes, Stack size 32 bytes, stm32l1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcBkupRead
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTCEx_BKUPWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_RTCEx_BKUPWrite &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcBkupWrite
</UL>

<P><STRONG><a name="[33a]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc_ex.o(i.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtc-board.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_DeactivateAlarm &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStopAlarm
</UL>

<P><STRONG><a name="[200]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_GetDate &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarValue
</UL>

<P><STRONG><a name="[202]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarValue
</UL>

<P><STRONG><a name="[203]"></a>HAL_RTC_Init</STRONG> (Thumb, 372 bytes, Stack size 8 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[204]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[207]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 1264 bytes, Stack size 32 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_SetAlarm_IT &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartAlarm
</UL>

<P><STRONG><a name="[209]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 464 bytes, Stack size 24 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_SetDate &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[20a]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 578 bytes, Stack size 24 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_SetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[206]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32l1xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[20b]"></a>HAL_SPI_DeInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HAL_SPI_DeInit &rArr; HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDeInit
</UL>

<P><STRONG><a name="[20d]"></a>HAL_SPI_Init</STRONG> (Thumb, 604 bytes, Stack size 8 bytes, stm32l1xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[20c]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi.o(i.HAL_SPI_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>

<P><STRONG><a name="[20e]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[210]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[1ed]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[20f]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[218]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[211]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart-board.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_ErrorCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[213]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[21b]"></a>HAL_UART_Init</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
</UL>

<P><STRONG><a name="[21c]"></a>HAL_UART_MspInit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[212]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>

<P><STRONG><a name="[21f]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart-board.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoFull
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPush
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[221]"></a>HAL_UART_Transmit</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_printf
</UL>

<P><STRONG><a name="[225]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32l1xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[223]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, uart-board.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoEmpty
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPop
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[39]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[224]"></a>IsFifoEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fifo.o(i.IsFifoEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuGetChar
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>

<P><STRONG><a name="[220]"></a>IsFifoFull</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fifo.o(i.IsFifoFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsFifoFull &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuPutChar
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[a2]"></a>LmHandlerDeviceTimeReq</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lmhandler.o(i.LmHandlerDeviceTimeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = LmHandlerDeviceTimeReq &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeIndication
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(i.LmHandlerPackageRegister)
</UL>
<P><STRONG><a name="[1aa]"></a>LmHandlerGetActiveRegion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lmhandler.o(i.LmHandlerGetActiveRegion))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTxUpdate
</UL>

<P><STRONG><a name="[1a8]"></a>LmHandlerGetCurrentClass</STRONG> (Thumb, 20 bytes, Stack size 48 bytes, lmhandler.o(i.LmHandlerGetCurrentClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LmHandlerGetCurrentClass &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionCN470GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTxUpdate
</UL>

<P><STRONG><a name="[235]"></a>LmHandlerGetCurrentDatarate</STRONG> (Thumb, 22 bytes, Stack size 48 bytes, lmhandler.o(i.LmHandlerGetCurrentDatarate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LmHandlerGetCurrentDatarate &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionCN470GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[256]"></a>LmHandlerGetDutyCycleWaitTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhandler.o(i.LmHandlerGetDutyCycleWaitTime))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceProcess
</UL>

<P><STRONG><a name="[236]"></a>LmHandlerInit</STRONG> (Thumb, 316 bytes, Stack size 64 bytes, lmhandler.o(i.LmHandlerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = LmHandlerInit &rArr; LoRaMacInitialization &rArr; SecureElementInit &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtRestore
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtFactoryReset
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacStart
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
</UL>

<P><STRONG><a name="[23c]"></a>LmHandlerIsBusy</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lmhandler.o(i.LmHandlerIsBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = LmHandlerIsBusy &rArr; LmHandlerJoin &rArr; LmHandlerJoinRequest &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackageIsTxPending
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpClockSyncAppTimeReq
</UL>

<P><STRONG><a name="[23f]"></a>LmHandlerJoin</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lmhandler.o(i.LmHandlerJoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = LmHandlerJoin &rArr; LmHandlerJoinRequest &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJoinRequest
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerIsBusy
</UL>

<P><STRONG><a name="[23e]"></a>LmHandlerJoinStatus</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, lmhandler.o(i.LmHandlerJoinStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LmHandlerJoinStatus &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionCN470GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerIsBusy
</UL>

<P><STRONG><a name="[247]"></a>LmHandlerPackageIsInitialized</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lmhandler.o(i.LmHandlerPackageIsInitialized))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LmHandlerPackageIsInitialized
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackagesProcess
</UL>

<P><STRONG><a name="[241]"></a>LmHandlerPackageRegister</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, lmhandler.o(i.LmHandlerPackageRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LmHandlerPackageRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmphCompliancePackageFactory
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmphClockSyncPackageFactory
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupPackageFactory
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpFragmentationPackageFactory
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
</UL>

<P><STRONG><a name="[248]"></a>LmHandlerPingSlotReq</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, lmhandler.o(i.LmHandlerPingSlotReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = LmHandlerPingSlotReq &rArr; LmHandlerSend &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[24a]"></a>LmHandlerProcess</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lmhandler.o(i.LmHandlerProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = LmHandlerProcess &rArr; LoRaMacProcess &rArr; LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; ProcessMacCommands &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtStore
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackagesProcess
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackageIsTxPending
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
</UL>

<P><STRONG><a name="[24d]"></a>LmHandlerRequestClass</STRONG> (Thumb, 134 bytes, Stack size 64 bytes, lmhandler.o(i.LmHandlerRequestClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = LmHandlerRequestClass &rArr; LmHandlerDeviceTimeReq &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerDeviceTimeReq
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJoinRequest
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupProcess
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceProcess
</UL>

<P><STRONG><a name="[249]"></a>LmHandlerSend</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, lmhandler.o(i.LmHandlerSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = LmHandlerSend &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnClassChange
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPingSlotReq
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerProcess
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupOnMcpsIndication
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpFragmentationProcess
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpFragmentationOnMcpsIndication
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceProcess
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpClockSyncAppTimeReq
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpClockSyncOnMcpsIndication
</UL>

<P><STRONG><a name="[250]"></a>LmHandlerSetSystemMaxRxError</STRONG> (Thumb, 32 bytes, Stack size 56 bytes, lmhandler.o(i.LmHandlerSetSystemMaxRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = LmHandlerSetSystemMaxRxError &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
</UL>

<P><STRONG><a name="[251]"></a>LmhpClockSyncAppTimeReq</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, lmhpclocksync.o(i.LmhpClockSyncAppTimeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = LmhpClockSyncAppTimeReq &rArr; LmHandlerSend &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerIsBusy
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpClockSyncProcess
</UL>

<P><STRONG><a name="[245]"></a>LmhpFragmentationPackageFactory</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lmhpfragmentation.o(i.LmhpFragmentationPackageFactory))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackageRegister
</UL>

<P><STRONG><a name="[244]"></a>LmhpRemoteMcastSetupPackageFactory</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lmhpremotemcastsetup.o(i.LmhpRemoteMcastSetupPackageFactory))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackageRegister
</UL>

<P><STRONG><a name="[243]"></a>LmphClockSyncPackageFactory</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lmhpclocksync.o(i.LmphClockSyncPackageFactory))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackageRegister
</UL>

<P><STRONG><a name="[242]"></a>LmphCompliancePackageFactory</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lmhpcompliance.o(i.LmphCompliancePackageFactory))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackageRegister
</UL>

<P><STRONG><a name="[261]"></a>LoRaMacAdrCalcNext</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, loramacadr.o(i.LoRaMacAdrCalcNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LoRaMacAdrCalcNext &rArr; RegionGetPhyParam &rArr; RegionCN470GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[2fb]"></a>LoRaMacClassBBeaconFreqReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBBeaconFreqReq))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[228]"></a>LoRaMacClassBBeaconTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBBeaconTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[2fa]"></a>LoRaMacClassBBeaconTimingAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBBeaconTimingAns))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2f7]"></a>LoRaMacClassBDeviceTimeAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBDeviceTimeAns))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[360]"></a>LoRaMacClassBHaltBeaconing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBHaltBeaconing))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[332]"></a>LoRaMacClassBInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBInit))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
</UL>

<P><STRONG><a name="[2c2]"></a>LoRaMacClassBIsAcquisitionInProgress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsAcquisitionInProgress))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[17f]"></a>LoRaMacClassBIsBeaconExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsBeaconExpected))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForClassBCollision
</UL>

<P><STRONG><a name="[35d]"></a>LoRaMacClassBIsBeaconModeActive</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsBeaconModeActive))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[181]"></a>LoRaMacClassBIsMulticastExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsMulticastExpected))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForClassBCollision
</UL>

<P><STRONG><a name="[180]"></a>LoRaMacClassBIsPingExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsPingExpected))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForClassBCollision
</UL>

<P><STRONG><a name="[35e]"></a>LoRaMacClassBIsUplinkCollision</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBIsUplinkCollision))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[2b4]"></a>LoRaMacClassBMibGetRequestConfirm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBMibGetRequestConfirm))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[22c]"></a>LoRaMacClassBMulticastSlotTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBMulticastSlotTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[2f9]"></a>LoRaMacClassBPingSlotChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBPingSlotChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2f8]"></a>LoRaMacClassBPingSlotInfoAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBPingSlotInfoAns))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[22a]"></a>LoRaMacClassBPingSlotTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBPingSlotTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[2c3]"></a>LoRaMacClassBProcess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBProcess))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[2a3]"></a>LoRaMacClassBResumeBeaconing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBResumeBeaconing))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleRequestEvents
</UL>

<P><STRONG><a name="[2fc]"></a>LoRaMacClassBRxBeacon</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBRxBeacon))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[227]"></a>LoRaMacClassBSetBeaconState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSetBeaconState))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[2fe]"></a>LoRaMacClassBSetFPendingBit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSetFPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[2ac]"></a>LoRaMacClassBSetMulticastPeriodicity</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSetMulticastPeriodicity))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcChannelSetupRxParams
</UL>

<P><STRONG><a name="[22b]"></a>LoRaMacClassBSetMulticastSlotState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSetMulticastSlotState))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[2c1]"></a>LoRaMacClassBSetPingSlotInfo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSetPingSlotInfo))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[229]"></a>LoRaMacClassBSetPingSlotState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSetPingSlotState))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[35f]"></a>LoRaMacClassBStopRxSlots</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBStopRxSlots))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[368]"></a>LoRaMacClassBSwitchClass</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacClassBSwitchClass))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
</UL>

<P><STRONG><a name="[265]"></a>LoRaMacCommandsAddCmd</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, loramaccommands.o(i.LoRaMacCommandsAddCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacCommandsAddCmd &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocNewMacCommandSlot
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkedListAdd
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSticky
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2ee]"></a>LoRaMacCommandsGetCmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, loramaccommands.o(i.LoRaMacCommandsGetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetransmission
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2ed]"></a>LoRaMacCommandsGetCmdSize</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, loramaccommands.o(i.LoRaMacCommandsGetCmdSize))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[26f]"></a>LoRaMacCommandsGetSizeSerializedCmds</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, loramaccommands.o(i.LoRaMacCommandsGetSizeSerializedCmds))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFrame
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[269]"></a>LoRaMacCommandsInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, loramaccommands.o(i.LoRaMacCommandsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacCommandsInit &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkedListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[26b]"></a>LoRaMacCommandsRemoveCmd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, loramaccommands.o(i.LoRaMacCommandsRemoveCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacCommandsRemoveCmd &rArr; LinkedListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkedListRemove
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMacCommandSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveStickyAnsCmds
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveNoneStickyCmds
</UL>

<P><STRONG><a name="[26c]"></a>LoRaMacCommandsRemoveNoneStickyCmds</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, loramaccommands.o(i.LoRaMacCommandsRemoveNoneStickyCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacCommandsRemoveNoneStickyCmds &rArr; LoRaMacCommandsRemoveCmd &rArr; LinkedListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[26d]"></a>LoRaMacCommandsRemoveStickyAnsCmds</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, loramaccommands.o(i.LoRaMacCommandsRemoveStickyAnsCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacCommandsRemoveStickyAnsCmds &rArr; LoRaMacCommandsRemoveCmd &rArr; LinkedListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSticky
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveMacCommands
</UL>

<P><STRONG><a name="[26e]"></a>LoRaMacCommandsSerializeCmds</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, loramaccommands.o(i.LoRaMacCommandsSerializeCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LoRaMacCommandsSerializeCmds &rArr; LoRaMacCommandsRemoveCmd &rArr; LinkedListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[270]"></a>LoRaMacConfirmQueueAdd</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacConfirmQueueAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsListFull
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseBufferPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
</UL>

<P><STRONG><a name="[2a2]"></a>LoRaMacConfirmQueueGetCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueGetCnt))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleRequestEvents
</UL>

<P><STRONG><a name="[272]"></a>LoRaMacConfirmQueueGetStatus</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacConfirmQueueGetStatus &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsListEmpty
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMlmeRequest
</UL>

<P><STRONG><a name="[273]"></a>LoRaMacConfirmQueueHandleCb</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueHandleCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacConfirmQueueHandleCb &rArr; LoRaMacConfirmQueueRemoveFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueRemoveFirst
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleRequestEvents
</UL>

<P><STRONG><a name="[275]"></a>LoRaMacConfirmQueueInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacConfirmQueueInit &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[264]"></a>LoRaMacConfirmQueueIsCmdActive</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueIsCmdActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacConfirmQueueIsCmdActive &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMlmeRequest
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCheckForBeaconAcquisition
</UL>

<P><STRONG><a name="[276]"></a>LoRaMacConfirmQueueIsFull</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueIsFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacConfirmQueueIsFull
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsListFull
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[274]"></a>LoRaMacConfirmQueueRemoveFirst</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueRemoveFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacConfirmQueueRemoveFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsListEmpty
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseBufferPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
</UL>

<P><STRONG><a name="[277]"></a>LoRaMacConfirmQueueSetStatus</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueSetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacConfirmQueueSetStatus &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsListEmpty
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[22d]"></a>LoRaMacConfirmQueueSetStatusCmn</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, loramacconfirmqueue.o(i.LoRaMacConfirmQueueSetStatusCmn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacConfirmQueueSetStatusCmn
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsListEmpty
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseBufferPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxTimeout
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[278]"></a>LoRaMacCryptoDeriveMcKEKey</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacCryptoDeriveMcKEKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = LoRaMacCryptoDeriveMcKEKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[279]"></a>LoRaMacCryptoDeriveMcRootKey</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, loramaccrypto.o(i.LoRaMacCryptoDeriveMcRootKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[27a]"></a>LoRaMacCryptoDeriveMcSessionKeyPair</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, loramaccrypto.o(i.LoRaMacCryptoDeriveMcSessionKeyPair))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = LoRaMacCryptoDeriveMcSessionKeyPair &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyAddrItem
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcChannelSetup
</UL>

<P><STRONG><a name="[1d3]"></a>LoRaMacCryptoGetFCntDown</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, loramaccrypto.o(i.LoRaMacCryptoGetFCntDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacCryptoGetFCntDown
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastFcntDown
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFCntDown
</UL>

<P><STRONG><a name="[2e5]"></a>LoRaMacCryptoGetFCntUp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, loramaccrypto.o(i.LoRaMacCryptoGetFCntUp))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFrame
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[361]"></a>LoRaMacCryptoGetRJcount</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, loramaccrypto.o(i.LoRaMacCryptoGetRJcount))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
</UL>

<P><STRONG><a name="[27c]"></a>LoRaMacCryptoHandleJoinAccept</STRONG> (Thumb, 456 bytes, Stack size 88 bytes, loramaccrypto.o(i.LoRaMacCryptoHandleJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LoRaMacCryptoHandleJoinAccept &rArr; SecureElementProcessJoinAccept &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserJoinAccept
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcRootKey
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcKEKey
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsJoinNonce11xOk
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsJoinNonce10xOk
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey11x
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey10x
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[281]"></a>LoRaMacCryptoInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, loramaccrypto.o(i.LoRaMacCryptoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacCryptoInit &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetFCnts
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[283]"></a>LoRaMacCryptoPrepareJoinRequest</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, loramaccrypto.o(i.LoRaMacCryptoPrepareJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = LoRaMacCryptoPrepareJoinRequest &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveLifeTimeSessionKey
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFrame
</UL>

<P><STRONG><a name="[285]"></a>LoRaMacCryptoPrepareReJoinType0or2</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, loramaccrypto.o(i.LoRaMacCryptoPrepareReJoinType0or2))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = LoRaMacCryptoPrepareReJoinType0or2 &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerReJoinType0or2
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFrame
</UL>

<P><STRONG><a name="[287]"></a>LoRaMacCryptoPrepareReJoinType1</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, loramaccrypto.o(i.LoRaMacCryptoPrepareReJoinType1))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = LoRaMacCryptoPrepareReJoinType1 &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerReJoinType1
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFrame
</UL>

<P><STRONG><a name="[289]"></a>LoRaMacCryptoSecureMessage</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, loramaccrypto.o(i.LoRaMacCryptoSecureMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = LoRaMacCryptoSecureMessage &rArr; ComputeCmacB1 &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOptsEncrypt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmacB1
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmacB0
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFrame
</UL>

<P><STRONG><a name="[28c]"></a>LoRaMacCryptoSetKey</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, loramaccrypto.o(i.LoRaMacCryptoSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcRootKey
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcKEKey
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcChannelSetup
</UL>

<P><STRONG><a name="[2bc]"></a>LoRaMacCryptoSetLrWanVersion</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, loramaccrypto.o(i.LoRaMacCryptoSetLrWanVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacCryptoSetLrWanVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[2a9]"></a>LoRaMacCryptoSetMulticastReference</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, loramaccrypto.o(i.LoRaMacCryptoSetMulticastReference))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[28e]"></a>LoRaMacCryptoUnsecureMessage</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, loramaccrypto.o(i.LoRaMacCryptoUnsecureMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = LoRaMacCryptoUnsecureMessage &rArr; VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyCmacB0
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFCntDown
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyAddrItem
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOptsEncrypt
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFCntDown
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[237]"></a>LoRaMacInitialization</STRONG> (Thumb, 922 bytes, Stack size 56 bytes, loramac.o(i.LoRaMacInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = LoRaMacInitialization &rArr; SecureElementInit &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacEnableRequests
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIsActive
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetMulticastReference
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueInit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
</UL>

<P><STRONG><a name="[23d]"></a>LoRaMacIsBusy</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, loramac.o(i.LoRaMacIsBusy))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerIsBusy
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacStop
</UL>

<P><STRONG><a name="[25f]"></a>LoRaMacMcChannelDelete</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, loramac.o(i.LoRaMacMcChannelDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LoRaMacMcChannelDelete &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupOnMcpsIndication
</UL>

<P><STRONG><a name="[25e]"></a>LoRaMacMcChannelSetup</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, loramac.o(i.LoRaMacMcChannelSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = LoRaMacMcChannelSetup &rArr; LoRaMacCryptoDeriveMcSessionKeyPair &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcSessionKeyPair
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupOnMcpsIndication
</UL>

<P><STRONG><a name="[260]"></a>LoRaMacMcChannelSetupRxParams</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, loramac.o(i.LoRaMacMcChannelSetupRxParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LoRaMacMcChannelSetupRxParams &rArr; RegionVerify &rArr; RegionCN470Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetMulticastPeriodicity
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupOnMcpsIndication
</UL>

<P><STRONG><a name="[24f]"></a>LoRaMacMcpsRequest</STRONG> (Thumb, 448 bytes, Stack size 72 bytes, loramac.o(i.LoRaMacMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleResponseTimeout
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForMinimumAbpDatarate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>

<P><STRONG><a name="[2be]"></a>LoRaMacMibClassBSetRequestConfirm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramacclassb.o(i.LoRaMacMibClassBSetRequestConfirm))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[1a9]"></a>LoRaMacMibGetRequestConfirm</STRONG> (Thumb, 550 bytes, Stack size 24 bytes, loramac.o(i.LoRaMacMibGetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionCN470GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetPin
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetJoinEui
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetDevEui
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNvmData
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetVersion
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtStore
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtRestore
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetCurrentDatarate
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetCurrentClass
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTxUpdate
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpClockSyncAppTimeReq
</UL>

<P><STRONG><a name="[239]"></a>LoRaMacMibSetRequestConfirm</STRONG> (Thumb, 1502 bytes, Stack size 24 bytes, loramac.o(i.LoRaMacMibSetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetPin
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetJoinEui
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetDevEui
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreNvmData
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRejoinCycleTime
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibClassBSetRequestConfirm
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetLrWanVersion
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeIndication
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetSystemMaxRxError
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpClockSyncAppTimeReq
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpClockSyncOnMcpsConfirm
</UL>

<P><STRONG><a name="[234]"></a>LoRaMacMlmeRequest</STRONG> (Thumb, 558 bytes, Stack size 48 bytes, loramac.o(i.LoRaMacMlmeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsFull
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetCnt
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueAdd
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotInfo
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetBeaconState
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsAcquisitionInProgress
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimerEvent
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPingSlotReq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerDeviceTimeReq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinRequest
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerBeaconReq
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
</UL>

<P><STRONG><a name="[28f]"></a>LoRaMacParserData</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, loramacparser.o(i.LoRaMacParserData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacParserData &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[27e]"></a>LoRaMacParserJoinAccept</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, loramacparser.o(i.LoRaMacParserJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacParserJoinAccept &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[24b]"></a>LoRaMacProcess</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, loramac.o(i.LoRaMacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = LoRaMacProcess &rArr; LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; ProcessMacCommands &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleRequestEvents
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleNvm
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMlmeRequest
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIndicationEvents
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacEnableRequests
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCheckForRxAbort
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCheckForBeaconAcquisition
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRequestPending
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerProcess
</UL>

<P><STRONG><a name="[24e]"></a>LoRaMacQueryTxPossible</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, loramac.o(i.LoRaMacQueryTxPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LoRaMacQueryTxPossible &rArr; LoRaMacAdrCalcNext &rArr; RegionGetPhyParam &rArr; RegionCN470GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>

<P><STRONG><a name="[28b]"></a>LoRaMacSerializerData</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, loramacserializer.o(i.LoRaMacSerializerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacSerializerData &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerializeTxFrame
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
</UL>

<P><STRONG><a name="[284]"></a>LoRaMacSerializerJoinRequest</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, loramacserializer.o(i.LoRaMacSerializerJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacSerializerJoinRequest &rArr; memcpyr
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerializeTxFrame
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>

<P><STRONG><a name="[286]"></a>LoRaMacSerializerReJoinType0or2</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, loramacserializer.o(i.LoRaMacSerializerReJoinType0or2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacSerializerReJoinType0or2 &rArr; memcpyr
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareReJoinType0or2
</UL>

<P><STRONG><a name="[288]"></a>LoRaMacSerializerReJoinType1</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, loramacserializer.o(i.LoRaMacSerializerReJoinType1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacSerializerReJoinType1 &rArr; memcpyr
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareReJoinType1
</UL>

<P><STRONG><a name="[23b]"></a>LoRaMacStart</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, loramac.o(i.LoRaMacStart))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtStore
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
</UL>

<P><STRONG><a name="[2c7]"></a>LoRaMacStop</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, loramac.o(i.LoRaMacStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LoRaMacStop
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtStore
</UL>

<P><STRONG><a name="[23a]"></a>LoRaMacTestSetDutyCycleOn</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacTestSetDutyCycleOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionCN470Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
</UL>

<P><STRONG><a name="[172]"></a>LpmEnterLowPower</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lpm-board.o(i.LpmEnterLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = LpmEnterLowPower &rArr; LpmExitStopMode &rArr; BoardInitMcu &rArr; UartInit &rArr; UartMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmExitStopMode
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterStopMode
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterSleepMode
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmExitSleepMode
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmExitOffMode
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterOffMode
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLowPowerHandler
</UL>

<P><STRONG><a name="[2cc]"></a>LpmEnterOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lpm-board.o(i.LpmEnterOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterLowPower
</UL>

<P><STRONG><a name="[2c8]"></a>LpmEnterSleepMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board.o(i.LpmEnterSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = LpmEnterSleepMode &rArr; HAL_PWR_EnterSLEEPMode &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterLowPower
</UL>

<P><STRONG><a name="[2ca]"></a>LpmEnterStopMode</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, board.o(i.LpmEnterStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = LpmEnterStopMode &rArr; BoardDeInitMcu &rArr; SpiDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUltraLowPower
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableFastWakeUp
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisablePVD
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDeInitMcu
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterLowPower
</UL>

<P><STRONG><a name="[2cd]"></a>LpmExitOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lpm-board.o(i.LpmExitOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterLowPower
</UL>

<P><STRONG><a name="[2c9]"></a>LpmExitSleepMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lpm-board.o(i.LpmExitSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterLowPower
</UL>

<P><STRONG><a name="[2cb]"></a>LpmExitStopMode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, board.o(i.LpmExitStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = LpmExitStopMode &rArr; BoardInitMcu &rArr; UartInit &rArr; UartMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmEnterLowPower
</UL>

<P><STRONG><a name="[16b]"></a>LpmSetOffMode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lpm-board.o(i.LpmSetOffMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LpmSetOffMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[2d1]"></a>LpmSetStopMode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lpm-board.o(i.LpmSetStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LpmSetStopMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarm
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[2d2]"></a>MX_ADC_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, adc.o(i.MX_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = MX_ADC_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d4]"></a>MX_GPIO_Init</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d5]"></a>MX_RTC_Init</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d6]"></a>MX_SPI1_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d7]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>NvmDataMgmtEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nvmdatamgmt.o(i.NvmDataMgmtEvent))
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(i.LmHandlerInit)
</UL>
<P><STRONG><a name="[188]"></a>NvmDataMgmtFactoryReset</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, nvmdatamgmt.o(i.NvmDataMgmtFactoryReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = NvmDataMgmtFactoryReset &rArr; NvmmReset &rArr; EepromMcuWriteBuffer &rArr; HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_DATAEEPROM_ProgramWord &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmmReset
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CliProcess
</UL>

<P><STRONG><a name="[238]"></a>NvmDataMgmtRestore</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, nvmdatamgmt.o(i.NvmDataMgmtRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = NvmDataMgmtRestore &rArr; NvmmCrc32Check &rArr; NvmmRead &rArr; EepromMcuReadBuffer &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmmRead
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmmCrc32Check
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
</UL>

<P><STRONG><a name="[24c]"></a>NvmDataMgmtStore</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, nvmdatamgmt.o(i.NvmDataMgmtStore))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = NvmDataMgmtStore &rArr; NvmmWrite &rArr; EepromMcuWriteBuffer &rArr; HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_DATAEEPROM_ProgramWord &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacStart
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacStop
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmmWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerProcess
</UL>

<P><STRONG><a name="[2db]"></a>NvmmCrc32Check</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, nvmm.o(i.NvmmCrc32Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = NvmmCrc32Check &rArr; NvmmRead &rArr; EepromMcuReadBuffer &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32Update
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32Init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32Finalize
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmmRead
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtRestore
</UL>

<P><STRONG><a name="[2dc]"></a>NvmmRead</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nvmm.o(i.NvmmRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = NvmmRead &rArr; EepromMcuReadBuffer &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtRestore
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmmCrc32Check
</UL>

<P><STRONG><a name="[2da]"></a>NvmmReset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nvmm.o(i.NvmmReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = NvmmReset &rArr; EepromMcuWriteBuffer &rArr; HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_DATAEEPROM_ProgramWord &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtFactoryReset
</UL>

<P><STRONG><a name="[2dd]"></a>NvmmWrite</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nvmm.o(i.NvmmWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = NvmmWrite &rArr; EepromMcuWriteBuffer &rArr; HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_DATAEEPROM_ProgramWord &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtStore
</UL>

<P><STRONG><a name="[3f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[2e4]"></a>PrepareFrame</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, loramac.o(i.PrepareFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PrepareFrame &rArr; GetMaxAppPayloadWithoutFOptsLength &rArr; RegionGetPhyParam &rArr; RegionCN470GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntUp
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[19e]"></a>PrintHexBuffer</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lmhandlermsgdisplay.o(i.PrintHexBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = PrintHexBuffer &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTxUpdate
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRxUpdate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBeaconUpdate
</UL>

<P><STRONG><a name="[69]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtc-board.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmSetStopMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[201]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[208]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[205]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32l1xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[2bf]"></a>RegionAlternateDr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, region.o(i.RegionAlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAlternateDr
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[2fd]"></a>RegionApplyCFList</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, region.o(i.RegionApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionApplyCFList &rArr; RegionCN470ApplyCFList
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ApplyCFList
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[191]"></a>RegionApplyDrOffset</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, region.o(i.RegionApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionApplyDrOffset &rArr; RegionCN470ApplyDrOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[305]"></a>RegionBaseUSVerifyFrequencyGroup</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, regionbaseus.o(i.RegionBaseUSVerifyFrequencyGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegionBaseUSVerifyFrequencyGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470B26VerifyRfFreq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470B20VerifyRfFreq
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470A26VerifyRfFreq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470A20VerifyRfFreq
</UL>

<P><STRONG><a name="[7c]"></a>RegionCN470A20GetBeaconChannelOffset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioncn470a20.o(i.RegionCN470A20GetBeaconChannelOffset))
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[7b]"></a>RegionCN470A20GetDownlinkFrequency</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, regioncn470a20.o(i.RegionCN470A20GetDownlinkFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionCN470A20GetDownlinkFrequency &rArr; RegionCN470A20GetRx1Frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470A20GetRx1Frequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[81]"></a>RegionCN470A20GetRx1Frequency</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, regioncn470a20.o(i.RegionCN470A20GetRx1Frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCN470A20GetRx1Frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470A20GetDownlinkFrequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[82]"></a>RegionCN470A20GetRx2Frequency</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, regioncn470a20.o(i.RegionCN470A20GetRx2Frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionCN470A20GetRx2Frequency &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[7f]"></a>RegionCN470A20InitializeChannels</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, regioncn470a20.o(i.RegionCN470A20InitializeChannels))
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[80]"></a>RegionCN470A20InitializeChannelsMask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regioncn470a20.o(i.RegionCN470A20InitializeChannelsMask))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470B20InitializeChannelsMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[7d]"></a>RegionCN470A20LinkAdrChMaskUpdate</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, regioncn470a20.o(i.RegionCN470A20LinkAdrChMaskUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470A20LinkAdrChMaskUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470B20LinkAdrChMaskUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[7e]"></a>RegionCN470A20VerifyRfFreq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, regioncn470a20.o(i.RegionCN470A20VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionCN470A20VerifyRfFreq &rArr; RegionBaseUSVerifyFrequencyGroup
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionBaseUSVerifyFrequencyGroup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[8c]"></a>RegionCN470A26GetBeaconChannelOffset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioncn470a26.o(i.RegionCN470A26GetBeaconChannelOffset))
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[8b]"></a>RegionCN470A26GetDownlinkFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioncn470a26.o(i.RegionCN470A26GetDownlinkFrequency))
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[91]"></a>RegionCN470A26GetRx1Frequency</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, regioncn470a26.o(i.RegionCN470A26GetRx1Frequency))
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[92]"></a>RegionCN470A26GetRx2Frequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioncn470a26.o(i.RegionCN470A26GetRx2Frequency))
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[8f]"></a>RegionCN470A26InitializeChannels</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, regioncn470a26.o(i.RegionCN470A26InitializeChannels))
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[90]"></a>RegionCN470A26InitializeChannelsMask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regioncn470a26.o(i.RegionCN470A26InitializeChannelsMask))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470B26InitializeChannelsMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[8d]"></a>RegionCN470A26LinkAdrChMaskUpdate</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, regioncn470a26.o(i.RegionCN470A26LinkAdrChMaskUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470A26LinkAdrChMaskUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470B26LinkAdrChMaskUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[8e]"></a>RegionCN470A26VerifyRfFreq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, regioncn470a26.o(i.RegionCN470A26VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionCN470A26VerifyRfFreq &rArr; RegionBaseUSVerifyFrequencyGroup
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionBaseUSVerifyFrequencyGroup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[302]"></a>RegionCN470AlternateDr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[303]"></a>RegionCN470ApplyCFList</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470ApplyCFList
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IdentifyChannelPlan
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyChannelPlanConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[304]"></a>RegionCN470ApplyDrOffset</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, regioncn470.o(i.RegionCN470ApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegionCN470ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[84]"></a>RegionCN470B20GetBeaconChannelOffset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioncn470b20.o(i.RegionCN470B20GetBeaconChannelOffset))
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[83]"></a>RegionCN470B20GetDownlinkFrequency</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, regioncn470b20.o(i.RegionCN470B20GetDownlinkFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionCN470B20GetDownlinkFrequency &rArr; RegionCN470B20GetRx1Frequency
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470B20GetRx1Frequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[89]"></a>RegionCN470B20GetRx1Frequency</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, regioncn470b20.o(i.RegionCN470B20GetRx1Frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCN470B20GetRx1Frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470B20GetDownlinkFrequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[8a]"></a>RegionCN470B20GetRx2Frequency</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, regioncn470b20.o(i.RegionCN470B20GetRx2Frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegionCN470B20GetRx2Frequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[87]"></a>RegionCN470B20InitializeChannels</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, regioncn470b20.o(i.RegionCN470B20InitializeChannels))
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[88]"></a>RegionCN470B20InitializeChannelsMask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, regioncn470b20.o(i.RegionCN470B20InitializeChannelsMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCN470B20InitializeChannelsMask
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470A20InitializeChannelsMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[85]"></a>RegionCN470B20LinkAdrChMaskUpdate</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, regioncn470b20.o(i.RegionCN470B20LinkAdrChMaskUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionCN470B20LinkAdrChMaskUpdate &rArr; RegionCN470A20LinkAdrChMaskUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470A20LinkAdrChMaskUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[86]"></a>RegionCN470B20VerifyRfFreq</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, regioncn470b20.o(i.RegionCN470B20VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RegionCN470B20VerifyRfFreq &rArr; RegionBaseUSVerifyFrequencyGroup
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionBaseUSVerifyFrequencyGroup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[94]"></a>RegionCN470B26GetBeaconChannelOffset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioncn470b26.o(i.RegionCN470B26GetBeaconChannelOffset))
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[93]"></a>RegionCN470B26GetDownlinkFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioncn470b26.o(i.RegionCN470B26GetDownlinkFrequency))
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[99]"></a>RegionCN470B26GetRx1Frequency</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, regioncn470b26.o(i.RegionCN470B26GetRx1Frequency))
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[9a]"></a>RegionCN470B26GetRx2Frequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioncn470b26.o(i.RegionCN470B26GetRx2Frequency))
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[97]"></a>RegionCN470B26InitializeChannels</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, regioncn470b26.o(i.RegionCN470B26InitializeChannels))
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[98]"></a>RegionCN470B26InitializeChannelsMask</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, regioncn470b26.o(i.RegionCN470B26InitializeChannelsMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCN470B26InitializeChannelsMask
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470A26InitializeChannelsMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[95]"></a>RegionCN470B26LinkAdrChMaskUpdate</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, regioncn470b26.o(i.RegionCN470B26LinkAdrChMaskUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionCN470B26LinkAdrChMaskUpdate &rArr; RegionCN470A26LinkAdrChMaskUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470A26LinkAdrChMaskUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[96]"></a>RegionCN470B26VerifyRfFreq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, regioncn470b26.o(i.RegionCN470B26VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionCN470B26VerifyRfFreq &rArr; RegionBaseUSVerifyFrequencyGroup
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionBaseUSVerifyFrequencyGroup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> regioncn470.o(i.ApplyChannelPlanConfig)
</UL>
<P><STRONG><a name="[308]"></a>RegionCN470ChanMaskSet</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, regioncn470.o(i.RegionCN470ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCN470ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[30a]"></a>RegionCN470ComputeRxWindowParameters</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, regioncn470.o(i.RegionCN470ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionCN470ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[32c]"></a>RegionCN470DlChannelReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470DlChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[30d]"></a>RegionCN470GetPhyParam</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, regioncn470.o(i.RegionCN470GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionCN470GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetNextLowerTxDr
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
</UL>

<P><STRONG><a name="[30f]"></a>RegionCN470InitDefaults</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, regioncn470.o(i.RegionCN470InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionCN470InitDefaults &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApplyChannelPlanConfig
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[310]"></a>RegionCN470LinkAdrReq</STRONG> (Thumb, 432 bytes, Stack size 104 bytes, regioncn470.o(i.RegionCN470LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RegionCN470LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[32d]"></a>RegionCN470NewChannelReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470NewChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[314]"></a>RegionCN470NextChannel</STRONG> (Thumb, 308 bytes, Stack size 200 bytes, regioncn470.o(i.RegionCN470NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeOnAir
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[32f]"></a>RegionCN470RxConfig</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, regioncn470.o(i.RegionCN470RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionCN470RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[317]"></a>RegionCN470RxParamSetupReq</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionCN470RxParamSetupReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[31a]"></a>RegionCN470SetBandTxDone</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RegionCN470SetBandTxDone &rArr; RegionCommonSetBandTxDone &rArr; GetDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[31c]"></a>RegionCN470TxConfig</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, regioncn470.o(i.RegionCN470TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeOnAir
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLimitTxPower
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[331]"></a>RegionCN470TxParamSetupReq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioncn470.o(i.RegionCN470TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[31f]"></a>RegionCN470Verify</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, regioncn470.o(i.RegionCN470Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionCN470Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[2ba]"></a>RegionChanMaskSet</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, region.o(i.RegionChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionChanMaskSet &rArr; RegionCN470ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ChanMaskSet
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[316]"></a>RegionCommonChanDisable</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, regioncommon.o(i.RegionCommonChanDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
</UL>

<P><STRONG><a name="[309]"></a>RegionCommonChanMaskCopy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonChanMaskCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470InitDefaults
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ChanMaskSet
</UL>

<P><STRONG><a name="[320]"></a>RegionCommonChanVerifyDr</STRONG> (Thumb, 130 bytes, Stack size 36 bytes, regioncommon.o(i.RegionCommonChanVerifyDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetNextLowerTxDr
</UL>

<P><STRONG><a name="[30c]"></a>RegionCommonComputeRxWindowParameters</STRONG> (Thumb, 304 bytes, Stack size 20 bytes, regioncommon.o(i.RegionCommonComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[30b]"></a>RegionCommonComputeSymbolTimeLoRa</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonComputeSymbolTimeLoRa))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[31e]"></a>RegionCommonComputeTxPower</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, regioncommon.o(i.RegionCommonComputeTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxConfig
</UL>

<P><STRONG><a name="[312]"></a>RegionCommonCountChannels</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, regioncommon.o(i.RegionCommonCountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionCommonCountChannels &rArr; CountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
</UL>

<P><STRONG><a name="[327]"></a>RegionCommonCountNbOfEnabledChannels</STRONG> (Thumb, 228 bytes, Stack size 52 bytes, regioncommon.o(i.RegionCommonCountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RegionCommonCountNbOfEnabledChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
</UL>

<P><STRONG><a name="[1d7]"></a>RegionCommonGetBandwidth</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonGetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeOnAir
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxConfig
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[30e]"></a>RegionCommonGetNextLowerTxDr</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, regioncommon.o(i.RegionCommonGetNextLowerTxDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
</UL>

<P><STRONG><a name="[315]"></a>RegionCommonIdentifyChannels</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, regioncommon.o(i.RegionCommonIdentifyChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountNbOfEnabledChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
</UL>

<P><STRONG><a name="[31d]"></a>RegionCommonLimitTxPower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonLimitTxPower))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxConfig
</UL>

<P><STRONG><a name="[313]"></a>RegionCommonLinkAdrReqVerifyParams</STRONG> (Thumb, 162 bytes, Stack size 44 bytes, regioncommon.o(i.RegionCommonLinkAdrReqVerifyParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
</UL>

<P><STRONG><a name="[311]"></a>RegionCommonParseLinkAdrReq</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, regioncommon.o(i.RegionCommonParseLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonParseLinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
</UL>

<P><STRONG><a name="[31b]"></a>RegionCommonSetBandTxDone</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, regioncommon.o(i.RegionCommonSetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RegionCommonSetBandTxDone &rArr; GetDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetBandTxDone
</UL>

<P><STRONG><a name="[328]"></a>RegionCommonUpdateBandTimeOff</STRONG> (Thumb, 328 bytes, Stack size 64 bytes, regioncommon.o(i.RegionCommonUpdateBandTimeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeToMs
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTimeCredits
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
</UL>

<P><STRONG><a name="[319]"></a>RegionCommonValueInRange</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, regioncommon.o(i.RegionCommonValueInRange))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470Verify
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxParamSetupReq
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountNbOfEnabledChannels
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>

<P><STRONG><a name="[192]"></a>RegionComputeRxWindowParameters</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, region.o(i.RegionComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RegionComputeRxWindowParameters &rArr; RegionCN470ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2f4]"></a>RegionDlChannelReq</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, region.o(i.RegionDlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionDlChannelReq
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470DlChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1d5]"></a>RegionGetPhyParam</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, region.o(i.RegionGetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RegionGetPhyParam &rArr; RegionCN470GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
</UL>

<P><STRONG><a name="[2b3]"></a>RegionGetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, region.o(i.RegionGetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionGetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[262]"></a>RegionInitDefaults</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, region.o(i.RegionInitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionInitDefaults &rArr; RegionCN470InitDefaults &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470InitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
</UL>

<P><STRONG><a name="[2a5]"></a>RegionIsActive</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, region.o(i.RegionIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[2ef]"></a>RegionLinkAdrReq</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, region.o(i.RegionLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RegionLinkAdrReq &rArr; RegionCN470LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470LinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2f1]"></a>RegionNewChannelReq</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, region.o(i.RegionNewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionNewChannelReq
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NewChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[32e]"></a>RegionNextChannel</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, region.o(i.RegionNextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[2e3]"></a>RegionRxConfig</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, region.o(i.RegionRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionRxConfig &rArr; RegionCN470RxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
</UL>

<P><STRONG><a name="[2f0]"></a>RegionRxParamSetupReq</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, region.o(i.RegionRxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionRxParamSetupReq &rArr; RegionCN470RxParamSetupReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[301]"></a>RegionSetBandTxDone</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, region.o(i.RegionSetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RegionSetBandTxDone &rArr; RegionCN470SetBandTxDone &rArr; RegionCommonSetBandTxDone &rArr; GetDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470SetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
</UL>

<P><STRONG><a name="[330]"></a>RegionTxConfig</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, region.o(i.RegionTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RegionTxConfig &rArr; RegionCN470TxConfig &rArr; RegionCommonComputeTxPower &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[2f2]"></a>RegionTxParamSetupReq</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, region.o(i.RegionTxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionTxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2ab]"></a>RegionVerify</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, region.o(i.RegionVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionVerify &rArr; RegionCN470Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcChannelSetupRxParams
</UL>

<P><STRONG><a name="[333]"></a>RtcBkupRead</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtc-board.o(i.RtcBkupRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeToMs
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeFromMs
</UL>

<P><STRONG><a name="[334]"></a>RtcBkupWrite</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rtc-board.o(i.RtcBkupWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = RtcBkupWrite &rArr; HAL_RTCEx_BKUPWrite &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
</UL>

<P><STRONG><a name="[335]"></a>RtcGetCalendarTime</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, rtc-board.o(i.RtcGetCalendarTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = RtcGetCalendarTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcTick2Ms
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
</UL>

<P><STRONG><a name="[36f]"></a>RtcGetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtc-board.o(i.RtcGetMinimumTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[36e]"></a>RtcGetTimerContext</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc-board.o(i.RtcGetTimerContext))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[338]"></a>RtcGetTimerElapsedTime</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, rtc-board.o(i.RtcGetTimerElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarm
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[339]"></a>RtcGetTimerValue</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, rtc-board.o(i.RtcGetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = RtcGetTimerValue &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>

<P><STRONG><a name="[169]"></a>RtcInit</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, rtc-board.o(i.RtcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = RtcInit &rArr; RtcSetTimerContext &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetTimerContext
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[33c]"></a>RtcMs2Tick</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtc-board.o(i.RtcMs2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RtcMs2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>

<P><STRONG><a name="[33d]"></a>RtcSetAlarm</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtc-board.o(i.RtcSetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerElapsedTime
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartAlarm
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpmSetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>

<P><STRONG><a name="[33b]"></a>RtcSetTimerContext</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtc-board.o(i.RtcSetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = RtcSetTimerContext &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[33e]"></a>RtcStartAlarm</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, rtc-board.o(i.RtcStartAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = RtcStartAlarm &rArr; HAL_RTC_SetAlarm_IT &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStopAlarm
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarm
</UL>

<P><STRONG><a name="[33f]"></a>RtcStopAlarm</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtc-board.o(i.RtcStopAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = RtcStopAlarm &rArr; HAL_RTC_DeactivateAlarm &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartAlarm
</UL>

<P><STRONG><a name="[337]"></a>RtcTick2Ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtc-board.o(i.RtcTick2Ms))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarTime
</UL>

<P><STRONG><a name="[3d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[342]"></a>SX1276AntSwDeInit</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sx1276mb1mas-board.o(i.SX1276AntSwDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = SX1276AntSwDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
</UL>

<P><STRONG><a name="[343]"></a>SX1276AntSwInit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sx1276mb1mas-board.o(i.SX1276AntSwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
</UL>

<P><STRONG><a name="[c0]"></a>SX1276CheckRfFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276mb1mas-board.o(i.SX1276CheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[348]"></a>SX1276GetBoardTcxoWakeupTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1276mb1mas-board.o(i.SX1276GetBoardTcxoWakeupTime))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetWakeupTime
</UL>

<P><STRONG><a name="[344]"></a>SX1276GetDio1PinState</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx1276mb1mas-board.o(i.SX1276GetDio1PinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = SX1276GetDio1PinState &rArr; GpioRead &rArr; GpioMcuRead &rArr; HAL_GPIO_ReadPin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioRead
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
</UL>

<P><STRONG><a name="[b9]"></a>SX1276GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1276.o(i.SX1276GetStatus))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>SX1276GetTimeOnAir</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, sx1276.o(i.SX1276GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SX1276GetTimeOnAir &rArr; SX1276GetLoRaTimeOnAirNumerator
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetLoRaTimeOnAirNumerator
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetLoRaBandwidthInHz
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetGfskTimeOnAirNumerator
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>SX1276GetWakeupTime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx1276.o(i.SX1276GetWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276GetWakeupTime
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetBoardTcxoWakeupTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>SX1276Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>SX1276IoDbgInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276mb1mas-board.o(i.SX1276IoDbgInit))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[161]"></a>SX1276IoDeInit</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, sx1276mb1mas-board.o(i.SX1276IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = SX1276IoDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDeInitMcu
</UL>

<P><STRONG><a name="[16e]"></a>SX1276IoInit</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, sx1276mb1mas-board.o(i.SX1276IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = SX1276IoInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[34b]"></a>SX1276IoIrqInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sx1276mb1mas-board.o(i.SX1276IoIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = SX1276IoIrqInit &rArr; GpioSetInterrupt &rArr; GpioMcuSetInterrupt &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[170]"></a>SX1276IoTcxoInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276mb1mas-board.o(i.SX1276IoTcxoInit))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[bc]"></a>SX1276IsChannelFree</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, sx1276.o(i.SX1276IsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = SX1276IsChannelFree &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFskBandwidthRegValue
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>SX1276Random</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = SX1276Random &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>SX1276Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = SX1276Read &rArr; SX1276ReadBuffer &rArr; GpioWrite &rArr; GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>SX1276ReadBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1276.o(i.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SX1276ReadBuffer &rArr; GpioWrite &rArr; GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>SX1276ReadRssi</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sx1276.o(i.SX1276ReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SX1276ReadRssi &rArr; SX1276Read &rArr; SX1276ReadBuffer &rArr; GpioWrite &rArr; GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[349]"></a>SX1276Reset</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sx1276mb1mas-board.o(i.SX1276Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = SX1276Reset &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetBoardTcxo
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[c2]"></a>SX1276Send</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, sx1276.o(i.SX1276Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = SX1276Send &rArr; SX1276SetTx &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[352]"></a>SX1276SetAntSw</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sx1276mb1mas-board.o(i.SX1276SetAntSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = SX1276SetAntSw &rArr; GpioWrite &rArr; GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[353]"></a>SX1276SetAntSwLowPower</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sx1276mb1mas-board.o(i.SX1276SetAntSwLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwInit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[350]"></a>SX1276SetBoardTcxo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276mb1mas-board.o(i.SX1276SetBoardTcxo))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[bb]"></a>SX1276SetChannel</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GpioWrite &rArr; GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ConvertFreqInHzToPllStep
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>SX1276SetMaxPayloadLength</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = SX1276SetMaxPayloadLength &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>SX1276SetModem</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>SX1276SetPublicNetwork</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[355]"></a>SX1276SetRfTxPower</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, sx1276mb1mas-board.o(i.SX1276SetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SX1276SetRfTxPower &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GpioWrite &rArr; GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetPaSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
</UL>

<P><STRONG><a name="[c5]"></a>SX1276SetRx</STRONG> (Thumb, 642 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SX1276SetRx &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>SX1276SetRxConfig</STRONG> (Thumb, 702 bytes, Stack size 64 bytes, sx1276.o(i.SX1276SetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFskBandwidthRegValue
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>SX1276SetSleep</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetBoardTcxo
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>SX1276SetStby</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = SX1276SetStby &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>SX1276SetTxConfig</STRONG> (Thumb, 580 bytes, Stack size 48 bytes, sx1276.o(i.SX1276SetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ConvertFreqInHzToPllStep
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>SX1276SetTxContinuousWave</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, sx1276.o(i.SX1276SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = SX1276SetTxContinuousWave &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>SX1276StartCad</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sx1276.o(i.SX1276StartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = SX1276StartCad &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>SX1276Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = SX1276Write &rArr; SX1276WriteBuffer &rArr; GpioWrite &rArr; GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>SX1276WriteBuffer</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1276.o(i.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SX1276WriteBuffer &rArr; GpioWrite &rArr; GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1mas-board.o(.constdata)
</UL>
<P><STRONG><a name="[1bd]"></a>SecureElementAesEncrypt</STRONG> (Thumb, 122 bytes, Stack size 280 bytes, soft-se.o(i.SecureElementAesEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyByID
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOptsEncrypt
</UL>

<P><STRONG><a name="[18d]"></a>SecureElementComputeAesCmac</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, soft-se.o(i.SecureElementComputeAesCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmacB1
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmacB0
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareReJoinType1
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareReJoinType0or2
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>

<P><STRONG><a name="[198]"></a>SecureElementDeriveAndStoreKey</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, soft-se.o(i.SecureElementDeriveAndStoreKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcRootKey
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcKEKey
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey11x
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey10x
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveLifeTimeSessionKey
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcSessionKeyPair
</UL>

<P><STRONG><a name="[2af]"></a>SecureElementGetDevEui</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, soft-se.o(i.SecureElementGetDevEui))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
</UL>

<P><STRONG><a name="[2b0]"></a>SecureElementGetJoinEui</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, soft-se.o(i.SecureElementGetJoinEui))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
</UL>

<P><STRONG><a name="[2b1]"></a>SecureElementGetPin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, soft-se.o(i.SecureElementGetPin))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[2a8]"></a>SecureElementInit</STRONG> (Thumb, 46 bytes, Stack size 496 bytes, soft-se.o(i.SecureElementInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = SecureElementInit &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[27d]"></a>SecureElementProcessJoinAccept</STRONG> (Thumb, 280 bytes, Stack size 120 bytes, soft-se.o(i.SecureElementProcessJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = SecureElementProcessJoinAccept &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[2b6]"></a>SecureElementSetDevEui</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, soft-se.o(i.SecureElementSetDevEui))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SecureElementSetDevEui &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[2b7]"></a>SecureElementSetJoinEui</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, soft-se.o(i.SecureElementSetJoinEui))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SecureElementSetJoinEui &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[28d]"></a>SecureElementSetKey</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, soft-se.o(i.SecureElementSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
</UL>

<P><STRONG><a name="[2b8]"></a>SecureElementSetPin</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, soft-se.o(i.SecureElementSetPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SecureElementSetPin &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[35b]"></a>SecureElementVerifyAesCmac</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, soft-se.o(i.SecureElementVerifyAesCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyCmacB0
</UL>

<P><STRONG><a name="[2ae]"></a>Send</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, loramac.o(i.Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveNoneStickyCmds
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[35a]"></a>SendFrameOnChannel</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, loramac.o(i.SendFrameOnChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = SendFrameOnChannel &rArr; SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; ComputeCmacB1 &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFrame
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBStopRxSlots
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsUplinkCollision
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconModeActive
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBHaltBeaconing
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[29b]"></a>SendReJoinReq</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, loramac.o(i.SendReJoinReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetJoinEui
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetDevEui
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetRJcount
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRejoin2CycleTimerEvent
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRejoin1CycleTimerEvent
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRejoin0CycleTimerEvent
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnForceRejoinReqCycleTimerEvent
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
</UL>

<P><STRONG><a name="[2c0]"></a>SetTxContinuousWave</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, loramac.o(i.SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetTxContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[160]"></a>SpiDeInit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, spi-board.o(i.SpiDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = SpiDeInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardDeInitMcu
</UL>

<P><STRONG><a name="[364]"></a>SpiFormat</STRONG> (Thumb, 228 bytes, Stack size 20 bytes, spi-board.o(i.SpiFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SpiFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[365]"></a>SpiFrequency</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, spi-board.o(i.SpiFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[34f]"></a>SpiInOut</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, spi-board.o(i.SpiInOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SpiInOut &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>

<P><STRONG><a name="[16d]"></a>SpiInit</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, spi-board.o(i.SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = SpiInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFrequency
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[40]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[2f6]"></a>SysTimeAdd</STRONG> (Thumb, 78 bytes, Stack size 28 bytes, systime.o(i.SysTimeAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeFromMs
</UL>

<P><STRONG><a name="[363]"></a>SysTimeFromMs</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, systime.o(i.SysTimeFromMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SysTimeFromMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeAdd
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcBkupRead
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaxTimeCredits
</UL>

<P><STRONG><a name="[252]"></a>SysTimeGet</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, systime.o(i.SysTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = SysTimeGet &rArr; RtcGetCalendarTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeAdd
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarTime
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcBkupRead
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupOnMcpsIndication
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpClockSyncAppTimeReq
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpClockSyncOnMcpsIndication
</UL>

<P><STRONG><a name="[2a7]"></a>SysTimeGetMcuTime</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, systime.o(i.SysTimeGetMcuTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = SysTimeGetMcuTime &rArr; RtcGetCalendarTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarTime
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
</UL>

<P><STRONG><a name="[253]"></a>SysTimeSet</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, systime.o(i.SysTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = SysTimeSet &rArr; RtcGetCalendarTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarTime
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcBkupWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpClockSyncOnMcpsIndication
</UL>

<P><STRONG><a name="[2f5]"></a>SysTimeSub</STRONG> (Thumb, 76 bytes, Stack size 28 bytes, systime.o(i.SysTimeSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SysTimeSub
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeToMs
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaxTimeCredits
</UL>

<P><STRONG><a name="[32b]"></a>SysTimeToMs</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, systime.o(i.SysTimeToMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcBkupRead
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaxTimeCredits
</UL>

<P><STRONG><a name="[36a]"></a>SystemClock_Config</STRONG> (Thumb, 144 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_EnableLSECSS
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32l1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(.text)
</UL>
<P><STRONG><a name="[255]"></a>TimerGetCurrentTime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(i.TimerGetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = TimerGetCurrentTime &rArr; RtcGetTimerValue &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcTick2Ms
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceProcess
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[22e]"></a>TimerGetElapsedTime</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer.o(i.TimerGetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = TimerGetElapsedTime &rArr; RtcGetTimerValue &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcTick2Ms
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcMs2Tick
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleResponseTimeout
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTimeCredits
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[257]"></a>TimerInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTxProcess
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupInit
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpFragmentationInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[1fe]"></a>TimerIrqHandler</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, timer.o(i.TimerIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = TimerIrqHandler &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetTimerContext
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerElapsedTime
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerContext
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[25c]"></a>TimerSetValue</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, timer.o(i.TimerSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcMs2Tick
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTxProcess
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxPeriodicityChanged
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRejoin2CycleTimerEvent
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRejoin1CycleTimerEvent
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRejoin0CycleTimerEvent
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupProcess
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupOnMcpsIndication
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpFragmentationProcess
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
</UL>

<P><STRONG><a name="[25d]"></a>TimerStart</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, timer.o(i.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetTimerContext
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerElapsedTime
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertTimer
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerExists
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLedBeaconTimerEvent
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnBeaconStatusChange
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxPeriodicityChanged
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxData
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRejoin2CycleTimerEvent
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRejoin1CycleTimerEvent
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRejoin0CycleTimerEvent
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupProcess
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpRemoteMcastSetupOnMcpsIndication
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpFragmentationProcess
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
</UL>

<P><STRONG><a name="[22f]"></a>TimerStop</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, timer.o(i.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStopAlarm
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed2TimerEvent
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnLed1TimerEvent
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnBeaconStatusChange
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxPeriodicityChanged
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRetransmitTimeoutTimerEvent
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRejoin2CycleTimerEvent
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRejoin1CycleTimerEvent
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRejoin0CycleTimerEvent
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnForceRejoinReqCycleTimerEvent
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSessionStopTimer
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnSessionStartTimer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnFragmentTxDelay
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
</UL>

<P><STRONG><a name="[21e]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32l1xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[66]"></a>USART2_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uart-board.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[168]"></a>UartConfig</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, uart.o(i.UartConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = UartConfig &rArr; UartMcuConfig &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[187]"></a>UartGetChar</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart.o(i.UartGetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UartGetChar &rArr; UartMcuGetChar &rArr; FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuGetChar
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CliProcess
</UL>

<P><STRONG><a name="[167]"></a>UartInit</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, uart.o(i.UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = UartInit &rArr; UartMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[372]"></a>UartMcuConfig</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, uart-board.o(i.UartMcuConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = UartMcuConfig &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
</UL>

<P><STRONG><a name="[373]"></a>UartMcuGetChar</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uart-board.o(i.UartMcuGetChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UartMcuGetChar &rArr; FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoEmpty
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPop
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetChar
</UL>

<P><STRONG><a name="[374]"></a>UartMcuInit</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, uart-board.o(i.UartMcuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = UartMcuInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[375]"></a>UartMcuPutChar</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, uart-board.o(i.UartMcuPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UartMcuPutChar &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoFull
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPush
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutChar
</UL>

<P><STRONG><a name="[376]"></a>UartPutChar</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart.o(i.UartPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UartPutChar &rArr; UartMcuPutChar &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuPutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[3c]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l151xc.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[119]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[13a]"></a>_sys_close</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, retarget_io.o(i._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[145]"></a>_sys_flen</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io.o(i._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[143]"></a>_sys_istty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[135]"></a>_sys_open</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, retarget_io.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_open
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[148]"></a>_sys_seek</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, retarget_io.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[149]"></a>_sys_write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, retarget_io.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stderr_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[156]"></a>aes_encrypt</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, aes.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_sub_rows
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_key
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>

<P><STRONG><a name="[15a]"></a>aes_set_key</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, aes.o(i.aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block_nn
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
</UL>

<P><STRONG><a name="[1ad]"></a>assert_failed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuWrite
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioMcuRead
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_ProgramWord
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_ProgramHalfWord
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_ProgramByte
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_FastProgramWord
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_FastProgramHalfWord
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_DATAEEPROM_FastProgramByte
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMcuConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuWriteBuffer
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuReadBuffer
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>

<P><STRONG><a name="[324]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[79]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, board.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; UartPutChar &rArr; UartMcuPutChar &rArr; FifoPush &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[385]"></a>lorawan_app</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, lorawan_app.o(i.lorawan_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = lorawan_app &rArr; LmHandlerProcess &rArr; LoRaMacProcess &rArr; LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; ProcessMacCommands &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetSystemMaxRxError
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerProcess
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackageRegister
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAppInfo
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CliProcess
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardLowPowerHandler
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitPeriph
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UplinkProcess
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTxProcess
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = main &rArr; lorawan_app &rArr; LmHandlerProcess &rArr; LoRaMacProcess &rArr; LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; ProcessMacCommands &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_printf
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[157]"></a>memcpy1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utilities.o(i.memcpy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetPin
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetJoinEui
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetDevEui
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CayenneLppCopy
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreNvmData
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerReJoinType0or2
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserJoinAccept
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyCmacB0
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470InitDefaults
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromMcuReadBuffer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[197]"></a>memcpyr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, utilities.o(i.memcpyr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerReJoinType1
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerReJoinType0or2
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey11x
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveLifeTimeSessionKey
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
</UL>

<P><STRONG><a name="[155]"></a>memset1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utilities.o(i.memset1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeIndication
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcChannelDelete
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassBStatusReset
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderProcess
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyCmacB0
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMacCommandSlot
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueInit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsInit
</UL>

<P><STRONG><a name="[388]"></a>rand1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, utilities.o(i.rand1))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>

<P><STRONG><a name="[25b]"></a>randr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, utilities.o(i.randr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = randr
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand1
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxPeriodicityChanged
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpFragmentationOnMcpsIndication
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470GetPhyParam
</UL>

<P><STRONG><a name="[2aa]"></a>srand1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utilities.o(i.srand1))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[19c]"></a>usb_printf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, usart.o(i.usb_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHexBuffer
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTxUpdate
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRxUpdate
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNvmDataChange
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNetworkParametersUpdate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMacMlmeRequestUpdate
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMacMcpsRequestUpdate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJoinRequestUpdate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayClassUpdate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBeaconUpdate
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAppInfo
</UL>

<P><STRONG><a name="[fc]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[7a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[382]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[389]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[38f]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[325]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[38d]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3de]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[38e]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[391]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[38c]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[38b]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[383]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[390]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[384]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>

<P><STRONG><a name="[392]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[3df]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[394]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[323]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[395]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[3e0]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[397]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CayenneLppAddAnalogInput
</UL>

<P><STRONG><a name="[39a]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2ea]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
</UL>

<P><STRONG><a name="[3e1]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[2f3]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[3e2]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[179]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CayenneLppAddAnalogInput
</UL>

<P><STRONG><a name="[39b]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[396]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[399]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[321]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[39c]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[322]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[39e]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[d9]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[dd]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1fa]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32l1xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1bb]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, stm32l1xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1b3]"></a>FLASH_DATAEEPROM_FastProgramByte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32l1xx_hal_flash_ex.o(i.FLASH_DATAEEPROM_FastProgramByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = FLASH_DATAEEPROM_FastProgramByte &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
</UL>

<P><STRONG><a name="[1b5]"></a>FLASH_DATAEEPROM_FastProgramHalfWord</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32l1xx_hal_flash_ex.o(i.FLASH_DATAEEPROM_FastProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = FLASH_DATAEEPROM_FastProgramHalfWord &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
</UL>

<P><STRONG><a name="[1b6]"></a>FLASH_DATAEEPROM_FastProgramWord</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32l1xx_hal_flash_ex.o(i.FLASH_DATAEEPROM_FastProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = FLASH_DATAEEPROM_FastProgramWord &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
</UL>

<P><STRONG><a name="[1b7]"></a>FLASH_DATAEEPROM_ProgramByte</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l1xx_hal_flash_ex.o(i.FLASH_DATAEEPROM_ProgramByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = FLASH_DATAEEPROM_ProgramByte &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
</UL>

<P><STRONG><a name="[1b8]"></a>FLASH_DATAEEPROM_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l1xx_hal_flash_ex.o(i.FLASH_DATAEEPROM_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = FLASH_DATAEEPROM_ProgramHalfWord &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
</UL>

<P><STRONG><a name="[1b9]"></a>FLASH_DATAEEPROM_ProgramWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l1xx_hal_flash_ex.o(i.FLASH_DATAEEPROM_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = FLASH_DATAEEPROM_ProgramWord &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
</UL>

<P><STRONG><a name="[1ee]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1ef]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[9b]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32l1xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l1xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[215]"></a>UART_EndRxTransfer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32l1xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[21a]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32l1xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback &rArr; FifoPop &rArr; FifoNext
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[214]"></a>UART_Receive_IT</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, stm32l1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[21d]"></a>UART_SetConfig</STRONG> (Thumb, 534 bytes, Stack size 16 bytes, stm32l1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = UART_SetConfig &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[219]"></a>UART_Transmit_IT</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32l1xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[222]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32l1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[16]"></a>OnBeaconStatusChange</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lorawan_app.o(i.OnBeaconStatusChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = OnBeaconStatusChange &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayBeaconUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>OnClassChange</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lorawan_app.o(i.OnClassChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = OnClassChange &rArr; LmHandlerSend &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayClassUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>OnJoinRequest</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lorawan_app.o(i.OnJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = OnJoinRequest &rArr; LmHandlerRequestClass &rArr; LmHandlerDeviceTimeReq &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayJoinRequestUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[b5]"></a>OnLed1TimerEvent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lorawan_app.o(i.OnLed1TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = OnLed1TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(i.lorawan_app)
</UL>
<P><STRONG><a name="[b6]"></a>OnLed2TimerEvent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lorawan_app.o(i.OnLed2TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = OnLed2TimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(i.lorawan_app)
</UL>
<P><STRONG><a name="[b7]"></a>OnLedBeaconTimerEvent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lorawan_app.o(i.OnLedBeaconTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = OnLedBeaconTimerEvent &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(i.lorawan_app)
</UL>
<P><STRONG><a name="[10]"></a>OnMacMcpsRequest</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lorawan_app.o(i.OnMacMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = OnMacMcpsRequest &rArr; DisplayMacMcpsRequestUpdate &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMacMcpsRequestUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>OnMacMlmeRequest</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lorawan_app.o(i.OnMacMlmeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = OnMacMlmeRequest &rArr; DisplayMacMlmeRequestUpdate &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMacMlmeRequestUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>OnMacProcessNotify</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lorawan_app.o(i.OnMacProcessNotify))
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>OnNetworkParametersChange</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lorawan_app.o(i.OnNetworkParametersChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OnNetworkParametersChange &rArr; DisplayNetworkParametersUpdate &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNetworkParametersUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>OnNvmDataChange</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lorawan_app.o(i.OnNvmDataChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = OnNvmDataChange &rArr; DisplayNvmDataChange &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayNvmDataChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>OnPingSlotPeriodicityChanged</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lorawan_app.o(i.OnPingSlotPeriodicityChanged))
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>OnRxData</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lorawan_app.o(i.OnRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = OnRxData &rArr; TimerStart &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayRxUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>OnSysTimeUpdate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lorawan_app.o(i.OnSysTimeUpdate))
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>OnTxData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lorawan_app.o(i.OnTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = OnTxData &rArr; DisplayTxUpdate &rArr; PrintHexBuffer &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayTxUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>OnTxFrameCtrlChanged</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lorawan_app.o(i.OnTxFrameCtrlChanged))
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>OnTxPeriodicityChanged</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lorawan_app.o(i.OnTxPeriodicityChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = OnTxPeriodicityChanged &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(.data)
</UL>
<P><STRONG><a name="[b4]"></a>OnTxTimerEvent</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lorawan_app.o(i.OnTxTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = OnTxTimerEvent &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTxProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_app.o(i.StartTxProcess)
</UL>
<P><STRONG><a name="[2e7]"></a>PrepareTxFrame</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lorawan_app.o(i.PrepareTxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = PrepareTxFrame &rArr; LmHandlerSend &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerIsBusy
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CayenneLppReset
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CayenneLppGetSize
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CayenneLppCopy
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CayenneLppAddDigitalInput
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CayenneLppAddAnalogInput
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetBatteryLevel
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UplinkProcess
</UL>

<P><STRONG><a name="[366]"></a>StartTxProcess</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lorawan_app.o(i.StartTxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = StartTxProcess &rArr; OnTxTimerEvent &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
</UL>

<P><STRONG><a name="[377]"></a>UplinkProcess</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lorawan_app.o(i.UplinkProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = UplinkProcess &rArr; PrepareTxFrame &rArr; LmHandlerSend &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareTxFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_app
</UL>

<P><STRONG><a name="[37c]"></a>add_round_key</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aes.o(i.add_round_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_round_key
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[37e]"></a>copy_and_key</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, aes.o(i.copy_and_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[387]"></a>copy_block</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, aes.o(i.copy_block))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
</UL>

<P><STRONG><a name="[381]"></a>copy_block_nn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aes.o(i.copy_block_nn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_block_nn
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>

<P><STRONG><a name="[37f]"></a>mix_sub_columns</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, aes.o(i.mix_sub_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[380]"></a>shift_sub_rows</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, aes.o(i.shift_sub_rows))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[37d]"></a>xor_block</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, aes.o(i.xor_block))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>

<P><STRONG><a name="[189]"></a>ComputeCmac</STRONG> (Thumb, 128 bytes, Stack size 328 bytes, soft-se.o(i.ComputeCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyByID
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
</UL>

<P><STRONG><a name="[18a]"></a>GetKeyByID</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, soft-se.o(i.GetKeyByID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyByID
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[233]"></a>LmHandlerBeaconReq</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lmhandler.o(i.LmHandlerBeaconReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = LmHandlerBeaconReq &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[a1]"></a>LmHandlerJoinRequest</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lmhandler.o(i.LmHandlerJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = LmHandlerJoinRequest &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(i.LmHandlerPackageRegister)
</UL>
<P><STRONG><a name="[240]"></a>LmHandlerPackageIsTxPending</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lmhandler.o(i.LmHandlerPackageIsTxPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LmHandlerPackageIsTxPending
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerProcess
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerIsBusy
</UL>

<P><STRONG><a name="[2d9]"></a>LmHandlerPackagesNotify</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lmhandler.o(i.LmHandlerPackagesNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LmHandlerPackagesNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeIndication
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsConfirm
</UL>

<P><STRONG><a name="[246]"></a>LmHandlerPackagesProcess</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lmhandler.o(i.LmHandlerPackagesProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LmHandlerPackagesProcess &rArr; LmHandlerPackageIsInitialized
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackageIsInitialized
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerProcess
</UL>

<P><STRONG><a name="[9c]"></a>McpsConfirm</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lmhandler.o(i.McpsConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = McpsConfirm &rArr; LmHandlerPackagesNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackagesNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(i.LmHandlerInit)
</UL>
<P><STRONG><a name="[9d]"></a>McpsIndication</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lmhandler.o(i.McpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = McpsIndication &rArr; LmHandlerPackagesNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackagesNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(i.LmHandlerInit)
</UL>
<P><STRONG><a name="[9e]"></a>MlmeConfirm</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, lmhandler.o(i.MlmeConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = MlmeConfirm &rArr; LmHandlerPingSlotReq &rArr; LmHandlerSend &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPingSlotReq
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetCurrentDatarate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerDeviceTimeReq
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackagesNotify
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerBeaconReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(i.LmHandlerInit)
</UL>
<P><STRONG><a name="[9f]"></a>MlmeIndication</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, lmhandler.o(i.MlmeIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = MlmeIndication &rArr; LmHandlerDeviceTimeReq &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerDeviceTimeReq
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackagesNotify
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(i.LmHandlerInit)
</UL>
<P><STRONG><a name="[15c]"></a>BitArrayFindFirstOne</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fragdecoder.o(i.BitArrayFindFirstOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BitArrayFindFirstOne &rArr; GetParity
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParity
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderProcess
</UL>

<P><STRONG><a name="[15e]"></a>BitArrayIsAllZeros</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fragdecoder.o(i.BitArrayIsAllZeros))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BitArrayIsAllZeros &rArr; GetParity
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParity
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderProcess
</UL>

<P><STRONG><a name="[1c8]"></a>FragExtractLineFromBinaryMatrix</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, fragdecoder.o(i.FragExtractLineFromBinaryMatrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FragExtractLineFromBinaryMatrix &rArr; SetParity
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParity
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderProcess
</UL>

<P><STRONG><a name="[1c3]"></a>FragFindMissingFrags</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, fragdecoder.o(i.FragFindMissingFrags))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderProcess
</UL>

<P><STRONG><a name="[1ca]"></a>FragFindMissingIndex</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fragdecoder.o(i.FragFindMissingIndex))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderProcess
</UL>

<P><STRONG><a name="[1c4]"></a>FragGetParityMatrixRow</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, fragdecoder.o(i.FragGetParityMatrixRow))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FragGetParityMatrixRow &rArr; SetParity
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParity
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPowerOfTwo
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragPrbs23
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderProcess
</UL>

<P><STRONG><a name="[1cd]"></a>FragPrbs23</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fragdecoder.o(i.FragPrbs23))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FragPrbs23
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragGetParityMatrixRow
</UL>

<P><STRONG><a name="[1cb]"></a>FragPushLineToBinaryMatrix</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, fragdecoder.o(i.FragPushLineToBinaryMatrix))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FragPushLineToBinaryMatrix &rArr; GetParity
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParity
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderProcess
</UL>

<P><STRONG><a name="[15d]"></a>GetParity</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fragdecoder.o(i.GetParity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetParity
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderProcess
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorParityLine
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragPushLineToBinaryMatrix
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitArrayIsAllZeros
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitArrayFindFirstOne
</UL>

<P><STRONG><a name="[1c6]"></a>GetRow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fragdecoder.o(i.GetRow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetRow
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderProcess
</UL>

<P><STRONG><a name="[1cc]"></a>IsPowerOfTwo</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fragdecoder.o(i.IsPowerOfTwo))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragGetParityMatrixRow
</UL>

<P><STRONG><a name="[1c5]"></a>SetParity</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fragdecoder.o(i.SetParity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetParity
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderProcess
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XorParityLine
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragGetParityMatrixRow
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragExtractLineFromBinaryMatrix
</UL>

<P><STRONG><a name="[1c2]"></a>SetRow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fragdecoder.o(i.SetRow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetRow
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderProcess
</UL>

<P><STRONG><a name="[1c7]"></a>XorDataLine</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, fragdecoder.o(i.XorDataLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XorDataLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderProcess
</UL>

<P><STRONG><a name="[1c9]"></a>XorParityLine</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, fragdecoder.o(i.XorParityLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XorParityLine &rArr; SetParity
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParity
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParity
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderProcess
</UL>

<P><STRONG><a name="[1b]"></a>LmhpClockSyncInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lmhpclocksync.o(i.LmhpClockSyncInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LmhpClockSyncInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpclocksync.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>LmhpClockSyncIsInitialized</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhpclocksync.o(i.LmhpClockSyncIsInitialized))
<BR>[Address Reference Count : 1]<UL><LI> lmhpclocksync.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>LmhpClockSyncIsTxPending</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhpclocksync.o(i.LmhpClockSyncIsTxPending))
<BR>[Address Reference Count : 1]<UL><LI> lmhpclocksync.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>LmhpClockSyncOnMcpsConfirm</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, lmhpclocksync.o(i.LmhpClockSyncOnMcpsConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = LmhpClockSyncOnMcpsConfirm &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveMcRootKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpclocksync.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>LmhpClockSyncOnMcpsIndication</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, lmhpclocksync.o(i.LmhpClockSyncOnMcpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = LmhpClockSyncOnMcpsIndication &rArr; LmHandlerSend &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpclocksync.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>LmhpClockSyncProcess</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lmhpclocksync.o(i.LmhpClockSyncProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = LmhpClockSyncProcess &rArr; LmhpClockSyncAppTimeReq &rArr; LmHandlerSend &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpClockSyncAppTimeReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpclocksync.o(.data)
</UL>
<P><STRONG><a name="[185]"></a>ClassBStatusReset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lmhpcompliance.o(i.ClassBStatusReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ClassBStatusReset &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMlmeIndication
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMlmeConfirm
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceInit
</UL>

<P><STRONG><a name="[21]"></a>LmhpComplianceInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lmhpcompliance.o(i.LmhpComplianceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LmhpComplianceInit &rArr; ClassBStatusReset &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassBStatusReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>LmhpComplianceIsInitialized</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhpcompliance.o(i.LmhpComplianceIsInitialized))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>LmhpComplianceIsTxPending</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhpcompliance.o(i.LmhpComplianceIsTxPending))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>LmhpComplianceOnMcpsIndication</STRONG> (Thumb, 1182 bytes, Stack size 112 bytes, lmhpcompliance.o(i.LmhpComplianceOnMcpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = LmhpComplianceOnMcpsIndication &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>LmhpComplianceOnMlmeConfirm</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lmhpcompliance.o(i.LmhpComplianceOnMlmeConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LmhpComplianceOnMlmeConfirm &rArr; ClassBStatusReset &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassBStatusReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>LmhpComplianceOnMlmeIndication</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lmhpcompliance.o(i.LmhpComplianceOnMlmeIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LmhpComplianceOnMlmeIndication &rArr; ClassBStatusReset &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBeaconRxStatusInd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClassBStatusReset
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>LmhpComplianceProcess</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lmhpcompliance.o(i.LmhpComplianceProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = LmhpComplianceProcess &rArr; LmHandlerSend &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDutyCycleWaitTime
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardResetMcu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data)
</UL>
<P><STRONG><a name="[254]"></a>SendBeaconRxStatusInd</STRONG> (Thumb, 514 bytes, Stack size 12 bytes, lmhpcompliance.o(i.SendBeaconRxStatusInd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SendBeaconRxStatusInd
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMlmeIndication
</UL>

<P><STRONG><a name="[28]"></a>LmhpFragmentationInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lmhpfragmentation.o(i.LmhpFragmentationInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LmhpFragmentationInit
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpfragmentation.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>LmhpFragmentationIsInitialized</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhpfragmentation.o(i.LmhpFragmentationIsInitialized))
<BR>[Address Reference Count : 1]<UL><LI> lmhpfragmentation.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>LmhpFragmentationIsTxPending</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhpfragmentation.o(i.LmhpFragmentationIsTxPending))
<BR>[Address Reference Count : 1]<UL><LI> lmhpfragmentation.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>LmhpFragmentationOnMcpsIndication</STRONG> (Thumb, 1210 bytes, Stack size 72 bytes, lmhpfragmentation.o(i.LmhpFragmentationOnMcpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = LmhpFragmentationOnMcpsIndication &rArr; LmHandlerSend &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderProcess
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderInit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderGetStatus
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FragDecoderGetMaxFileSize
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpfragmentation.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>LmhpFragmentationProcess</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lmhpfragmentation.o(i.LmhpFragmentationProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = LmhpFragmentationProcess &rArr; LmHandlerSend &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpfragmentation.o(.data)
</UL>
<P><STRONG><a name="[a3]"></a>OnFragmentTxDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lmhpfragmentation.o(i.OnFragmentTxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = OnFragmentTxDelay &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpfragmentation.o(i.LmhpFragmentationInit)
</UL>
<P><STRONG><a name="[2d]"></a>LmhpRemoteMcastSetupInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lmhpremotemcastsetup.o(i.LmhpRemoteMcastSetupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LmhpRemoteMcastSetupInit
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpremotemcastsetup.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>LmhpRemoteMcastSetupIsInitialized</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhpremotemcastsetup.o(i.LmhpRemoteMcastSetupIsInitialized))
<BR>[Address Reference Count : 1]<UL><LI> lmhpremotemcastsetup.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>LmhpRemoteMcastSetupIsTxPending</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhpremotemcastsetup.o(i.LmhpRemoteMcastSetupIsTxPending))
<BR>[Address Reference Count : 1]<UL><LI> lmhpremotemcastsetup.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>LmhpRemoteMcastSetupOnMcpsIndication</STRONG> (Thumb, 2376 bytes, Stack size 64 bytes, lmhpremotemcastsetup.o(i.LmhpRemoteMcastSetupOnMcpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = LmhpRemoteMcastSetupOnMcpsIndication &rArr; LmHandlerSend &rArr; LoRaMacMcpsRequest &rArr; Send &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcChannelSetupRxParams
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcChannelSetup
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcChannelDelete
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpremotemcastsetup.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>LmhpRemoteMcastSetupProcess</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lmhpremotemcastsetup.o(i.LmhpRemoteMcastSetupProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = LmhpRemoteMcastSetupProcess &rArr; LmHandlerRequestClass &rArr; LmHandlerDeviceTimeReq &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpremotemcastsetup.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>OnSessionStartTimer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lmhpremotemcastsetup.o(i.OnSessionStartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = OnSessionStartTimer &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpremotemcastsetup.o(i.LmhpRemoteMcastSetupInit)
</UL>
<P><STRONG><a name="[a5]"></a>OnSessionStopTimer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lmhpremotemcastsetup.o(i.OnSessionStopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = OnSessionStopTimer &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpremotemcastsetup.o(i.LmhpRemoteMcastSetupInit)
</UL>
<P><STRONG><a name="[357]"></a>CalculateBackOff</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, loramac.o(i.CalculateBackOff))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[29f]"></a>CallNvmDataChangeCallback</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, loramac.o(i.CallNvmDataChangeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CallNvmDataChangeCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleNvm
</UL>

<P><STRONG><a name="[17e]"></a>CheckForClassBCollision</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, loramac.o(i.CheckForClassBCollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckForClassBCollision
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconExpected
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[2ad]"></a>CheckForMinimumAbpDatarate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, loramac.o(i.CheckForMinimumAbpDatarate))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[183]"></a>CheckRetrans</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, loramac.o(i.CheckRetrans))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetransUnconfirmedUplink
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetransConfirmedUplink
</UL>

<P><STRONG><a name="[182]"></a>CheckRetransConfirmedUplink</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, loramac.o(i.CheckRetransConfirmedUplink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckRetransConfirmedUplink
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetrans
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
</UL>

<P><STRONG><a name="[184]"></a>CheckRetransUnconfirmedUplink</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, loramac.o(i.CheckRetransUnconfirmedUplink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckRetransUnconfirmedUplink
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetrans
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
</UL>

<P><STRONG><a name="[190]"></a>ComputeRxWindowParameters</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, loramac.o(i.ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ComputeRxWindowParameters &rArr; RegionComputeRxWindowParameters &rArr; RegionCN470ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[2bd]"></a>ConvertRejoinCycleTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, loramac.o(i.ConvertRejoinCycleTime))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRejoin2CycleTimerEvent
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRejoin1CycleTimerEvent
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRejoin0CycleTimerEvent
</UL>

<P><STRONG><a name="[1d2]"></a>GetFCntDown</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, loramac.o(i.GetFCntDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetFCntDown &rArr; LoRaMacCryptoGetFCntDown
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntDown
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[1d4]"></a>GetMaxAppPayloadWithoutFOptsLength</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, loramac.o(i.GetMaxAppPayloadWithoutFOptsLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GetMaxAppPayloadWithoutFOptsLength &rArr; RegionGetPhyParam &rArr; RegionCN470GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[2b2]"></a>GetNvmData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramac.o(i.GetNvmData))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[226]"></a>HandleRadioRxErrorTimeout</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, loramac.o(i.HandleRadioRxErrorTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = HandleRadioRxErrorTimeout &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRxSlotIdleState
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotState
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetMulticastSlotState
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetBeaconState
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotTimerEvent
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMulticastSlotTimerEvent
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconExpected
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxTimeout
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxError
</UL>

<P><STRONG><a name="[367]"></a>IncreaseAdrAckCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramac.o(i.IncreaseAdrAckCounter))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetransmission
</UL>

<P><STRONG><a name="[29a]"></a>IsReJoin0Required</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, loramac.o(i.IsReJoin0Required))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
</UL>

<P><STRONG><a name="[2c5]"></a>IsRequestPending</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, loramac.o(i.IsRequestPending))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[263]"></a>LoRaMacCheckForBeaconAcquisition</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, loramac.o(i.LoRaMacCheckForBeaconAcquisition))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LoRaMacCheckForBeaconAcquisition &rArr; LoRaMacConfirmQueueIsCmdActive &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[2c4]"></a>LoRaMacCheckForRxAbort</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, loramac.o(i.LoRaMacCheckForRxAbort))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[2a1]"></a>LoRaMacEnableRequests</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramac.o(i.LoRaMacEnableRequests))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleRequestEvents
</UL>

<P><STRONG><a name="[2c6]"></a>LoRaMacHandleIndicationEvents</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, loramac.o(i.LoRaMacHandleIndicationEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacHandleIndicationEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[292]"></a>LoRaMacHandleIrqEvents</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacHandleIrqEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = LoRaMacHandleIrqEvents &rArr; ProcessRadioRxDone &rArr; ProcessMacCommands &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionEnd
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardCriticalSectionBegin
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxTimeout
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxDone
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxTimeout
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxError
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[298]"></a>LoRaMacHandleMcpsRequest</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacHandleMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = LoRaMacHandleMcpsRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetransmission
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsReJoin0Required
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetransUnconfirmedUplink
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRetransConfirmedUplink
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[29c]"></a>LoRaMacHandleMlmeRequest</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, loramac.o(i.LoRaMacHandleMlmeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoRaMacHandleMlmeRequest &rArr; LoRaMacConfirmQueueGetStatus &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[29d]"></a>LoRaMacHandleNvm</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacHandleNvm))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LoRaMacHandleNvm &rArr; Crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallNvmDataChangeCallback
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[2a0]"></a>LoRaMacHandleRequestEvents</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, loramac.o(i.LoRaMacHandleRequestEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoRaMacHandleRequestEvents &rArr; LoRaMacConfirmQueueHandleCb &rArr; LoRaMacConfirmQueueRemoveFirst
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacEnableRequests
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetCnt
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBResumeBeaconing
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[2a4]"></a>LoRaMacHandleResponseTimeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, loramac.o(i.LoRaMacHandleResponseTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = LoRaMacHandleResponseTimeout &rArr; TimerGetElapsedTime &rArr; RtcGetTimerValue &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>

<P><STRONG><a name="[ad]"></a>OnForceRejoinReqCycleTimerEvent</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, loramac.o(i.OnForceRejoinReqCycleTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = OnForceRejoinReqCycleTimerEvent &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[af]"></a>OnRadioRxDone</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, loramac.o(i.OnRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = OnRadioRxDone &rArr; TimerGetCurrentTime &rArr; RtcGetTimerValue &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[b0]"></a>OnRadioRxError</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, loramac.o(i.OnRadioRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnRadioRxError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[b2]"></a>OnRadioRxTimeout</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, loramac.o(i.OnRadioRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnRadioRxTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[ae]"></a>OnRadioTxDone</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, loramac.o(i.OnRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = OnRadioTxDone &rArr; SysTimeGet &rArr; RtcGetCalendarTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[b1]"></a>OnRadioTxTimeout</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, loramac.o(i.OnRadioTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnRadioTxTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[aa]"></a>OnRejoin0CycleTimerEvent</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, loramac.o(i.OnRejoin0CycleTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = OnRejoin0CycleTimerEvent &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRejoinCycleTime
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[ab]"></a>OnRejoin1CycleTimerEvent</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, loramac.o(i.OnRejoin1CycleTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = OnRejoin1CycleTimerEvent &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRejoinCycleTime
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[ac]"></a>OnRejoin2CycleTimerEvent</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, loramac.o(i.OnRejoin2CycleTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = OnRejoin2CycleTimerEvent &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRejoinCycleTime
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[a9]"></a>OnRetransmitTimeoutTimerEvent</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, loramac.o(i.OnRetransmitTimeoutTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = OnRetransmitTimeoutTimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[a7]"></a>OnRxWindow1TimerEvent</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, loramac.o(i.OnRxWindow1TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = OnRxWindow1TimerEvent &rArr; RxWindowSetup &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[a8]"></a>OnRxWindow2TimerEvent</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, loramac.o(i.OnRxWindow2TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[a6]"></a>OnTxDelayedTimerEvent</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, loramac.o(i.OnTxDelayedTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetransmission
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleResponseTimeout
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(i.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[2b9]"></a>OpenContinuousRxCWindow</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, loramac.o(i.OpenContinuousRxCWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OpenContinuousRxCWindow &rArr; RegionComputeRxWindowParameters &rArr; RegionCN470ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
</UL>

<P><STRONG><a name="[2e6]"></a>PrepareRxDoneAbort</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, loramac.o(i.PrepareRxDoneAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = PrepareRxDoneAbort &rArr; OnRetransmitTimeoutTimerEvent &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRxSlotIdleState
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRetransmitTimeoutTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[2ec]"></a>ProcessMacCommands</STRONG> (Thumb, 2108 bytes, Stack size 96 bytes, loramac.o(i.ProcessMacCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = ProcessMacCommands &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertRejoinCycleTime
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeAdd
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetCmdSize
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetCmd
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotInfoAns
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotChannelReq
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBDeviceTimeAns
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimingAns
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconFreqReq
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[294]"></a>ProcessRadioRxDone</STRONG> (Thumb, 2116 bytes, Stack size 184 bytes, loramac.o(i.ProcessRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = ProcessRadioRxDone &rArr; ProcessMacCommands &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetJoinEui
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRxSlotIdleState
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveMacCommands
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRetransmitTimeoutTimerEvent
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFCntDown
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotState
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetMulticastSlotState
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetFPendingBit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBRxBeacon
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotTimerEvent
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMulticastSlotTimerEvent
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetermineFrameType
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
</UL>

<P><STRONG><a name="[296]"></a>ProcessRadioRxError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, loramac.o(i.ProcessRadioRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ProcessRadioRxError &rArr; HandleRadioRxErrorTimeout &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
</UL>

<P><STRONG><a name="[297]"></a>ProcessRadioRxTimeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, loramac.o(i.ProcessRadioRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ProcessRadioRxTimeout &rArr; HandleRadioRxErrorTimeout &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
</UL>

<P><STRONG><a name="[293]"></a>ProcessRadioTxDone</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, loramac.o(i.ProcessRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ProcessRadioTxDone &rArr; TimerSetValue &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
</UL>

<P><STRONG><a name="[295]"></a>ProcessRadioTxTimeout</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, loramac.o(i.ProcessRadioTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ProcessRadioTxTimeout &rArr; LoRaMacConfirmQueueSetStatusCmn
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRxSlotIdleState
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleIrqEvents
</UL>

<P><STRONG><a name="[300]"></a>RemoveMacCommands</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, loramac.o(i.RemoveMacCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RemoveMacCommands &rArr; LoRaMacCommandsRemoveStickyAnsCmds &rArr; LoRaMacCommandsRemoveCmd &rArr; LinkedListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveStickyAnsCmds
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
</UL>

<P><STRONG><a name="[2a6]"></a>ResetMacParameters</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, loramac.o(i.ResetMacParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ResetMacParameters &rArr; RegionInitDefaults &rArr; RegionCN470InitDefaults &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[2bb]"></a>RestoreNvmData</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, loramac.o(i.RestoreNvmData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RestoreNvmData &rArr; Crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[2e1]"></a>RxWindowSetup</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, loramac.o(i.RxWindowSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = RxWindowSetup &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
</UL>

<P><STRONG><a name="[2e2]"></a>ScheduleTx</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, loramac.o(i.ScheduleTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = ScheduleTx &rArr; RegionNextChannel &rArr; RegionCN470NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFrame
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerializeTxFrame
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeRxWindowParameters
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckForClassBCollision
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateBackOff
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
</UL>

<P><STRONG><a name="[35c]"></a>SecureFrame</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, loramac.o(i.SecureFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = SecureFrame &rArr; LoRaMacCryptoSecureMessage &rArr; ComputeCmacB1 &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareReJoinType1
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareReJoinType0or2
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntUp
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[358]"></a>SerializeTxFrame</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, loramac.o(i.SerializeTxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SerializeTxFrame &rArr; LoRaMacSerializerJoinRequest &rArr; memcpyr
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[299]"></a>StopRetransmission</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, loramac.o(i.StopRetransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StopRetransmission
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseAdrAckCounter
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleMcpsRequest
</UL>

<P><STRONG><a name="[2b5]"></a>SwitchClass</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, loramac.o(i.SwitchClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SwitchClass &rArr; OpenContinuousRxCWindow &rArr; RegionComputeRxWindowParameters &rArr; RegionCN470ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSwitchClass
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
</UL>

<P><STRONG><a name="[230]"></a>UpdateRxSlotIdleState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, loramac.o(i.UpdateRxSlotIdleState))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioTxTimeout
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessRadioRxDone
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[378]"></a>ValidatePayloadLength</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, loramac.o(i.ValidatePayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ValidatePayloadLength &rArr; GetMaxAppPayloadWithoutFOptsLength &rArr; RegionGetPhyParam &rArr; RegionCN470GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyTxFrame
</UL>

<P><STRONG><a name="[359]"></a>VerifyTxFrame</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, loramac.o(i.VerifyTxFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = VerifyTxFrame &rArr; ValidatePayloadLength &rArr; GetMaxAppPayloadWithoutFOptsLength &rArr; RegionGetPhyParam &rArr; RegionCN470GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidatePayloadLength
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1ce]"></a>FreeMacCommandSlot</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, loramaccommands.o(i.FreeMacCommandSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FreeMacCommandSlot &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
</UL>

<P><STRONG><a name="[2d8]"></a>IsSlotFree</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, loramaccommands.o(i.IsSlotFree))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MallocNewMacCommandSlot
</UL>

<P><STRONG><a name="[268]"></a>IsSticky</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, loramaccommands.o(i.IsSticky))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveStickyAnsCmds
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
</UL>

<P><STRONG><a name="[267]"></a>LinkedListAdd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, loramaccommands.o(i.LinkedListAdd))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
</UL>

<P><STRONG><a name="[232]"></a>LinkedListGetPrevious</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, loramaccommands.o(i.LinkedListGetPrevious))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkedListRemove
</UL>

<P><STRONG><a name="[26a]"></a>LinkedListInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, loramaccommands.o(i.LinkedListInit))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsInit
</UL>

<P><STRONG><a name="[231]"></a>LinkedListRemove</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, loramaccommands.o(i.LinkedListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LinkedListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkedListGetPrevious
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
</UL>

<P><STRONG><a name="[266]"></a>MallocNewMacCommandSlot</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, loramaccommands.o(i.MallocNewMacCommandSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MallocNewMacCommandSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSlotFree
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
</UL>

<P><STRONG><a name="[1cf]"></a>GetElement</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, loramacconfirmqueue.o(i.GetElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsListEmpty
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncreaseBufferPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetStatus
</UL>

<P><STRONG><a name="[1d1]"></a>IncreaseBufferPointer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, loramacconfirmqueue.o(i.IncreaseBufferPointer))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueRemoveFirst
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueAdd
</UL>

<P><STRONG><a name="[1d0]"></a>IsListEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, loramacconfirmqueue.o(i.IsListEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueRemoveFirst
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetStatus
</UL>

<P><STRONG><a name="[271]"></a>IsListFull</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, loramacconfirmqueue.o(i.IsListFull))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsFull
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueAdd
</UL>

<P><STRONG><a name="[17c]"></a>CheckFCntDown</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, loramaccrypto.o(i.CheckFCntDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckFCntDown
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastFcntDown
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[18b]"></a>ComputeCmacB0</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, loramaccrypto.o(i.ComputeCmacB0))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ComputeCmacB0 &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareB0
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
</UL>

<P><STRONG><a name="[18e]"></a>ComputeCmacB1</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, loramaccrypto.o(i.ComputeCmacB1))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ComputeCmacB1 &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareB1
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
</UL>

<P><STRONG><a name="[196]"></a>DeriveLifeTimeSessionKey</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, loramaccrypto.o(i.DeriveLifeTimeSessionKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = DeriveLifeTimeSessionKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>

<P><STRONG><a name="[199]"></a>DeriveSessionKey10x</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, loramaccrypto.o(i.DeriveSessionKey10x))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = DeriveSessionKey10x &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[19a]"></a>DeriveSessionKey11x</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, loramaccrypto.o(i.DeriveSessionKey11x))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = DeriveSessionKey11x &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[1bc]"></a>FOptsEncrypt</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, loramaccrypto.o(i.FOptsEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = FOptsEncrypt &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
</UL>

<P><STRONG><a name="[27b]"></a>GetKeyAddrItem</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, loramaccrypto.o(i.GetKeyAddrItem))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveMcSessionKeyPair
</UL>

<P><STRONG><a name="[17d]"></a>GetLastFcntDown</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, loramaccrypto.o(i.GetLastFcntDown))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFCntDown
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntDown
</UL>

<P><STRONG><a name="[280]"></a>IsJoinNonce10xOk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, loramaccrypto.o(i.IsJoinNonce10xOk))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[27f]"></a>IsJoinNonce11xOk</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, loramaccrypto.o(i.IsJoinNonce11xOk))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[28a]"></a>PayloadEncrypt</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, loramaccrypto.o(i.PayloadEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = PayloadEncrypt &rArr; SecureElementAesEncrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
</UL>

<P><STRONG><a name="[18c]"></a>PrepareB0</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, loramaccrypto.o(i.PrepareB0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PrepareB0
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyCmacB0
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmacB0
</UL>

<P><STRONG><a name="[18f]"></a>PrepareB1</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, loramaccrypto.o(i.PrepareB1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PrepareB1
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmacB1
</UL>

<P><STRONG><a name="[282]"></a>ResetFCnts</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, loramaccrypto.o(i.ResetFCnts))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
</UL>

<P><STRONG><a name="[291]"></a>UpdateFCntDown</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, loramaccrypto.o(i.UpdateFCntDown))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[290]"></a>VerifyCmacB0</STRONG> (Thumb, 130 bytes, Stack size 320 bytes, loramaccrypto.o(i.VerifyCmacB0))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = VerifyCmacB0 &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareB0
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[307]"></a>ApplyChannelPlanConfig</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, regioncn470.o(i.ApplyChannelPlanConfig))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470InitDefaults
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ApplyCFList
</UL>

<P><STRONG><a name="[1d6]"></a>GetTimeOnAir</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, regioncn470.o(i.GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetTimeOnAir
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470TxConfig
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470NextChannel
</UL>

<P><STRONG><a name="[306]"></a>IdentifyChannelPlan</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, regioncn470.o(i.IdentifyChannelPlan))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470ApplyCFList
</UL>

<P><STRONG><a name="[318]"></a>VerifyRfFreq</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, regioncn470.o(i.VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470Verify
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCN470RxParamSetupReq
</UL>

<P><STRONG><a name="[326]"></a>CountChannels</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, regioncommon.o(i.CountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
</UL>

<P><STRONG><a name="[329]"></a>GetDutyCycle</STRONG> (Thumb, 66 bytes, Stack size 28 bytes, regioncommon.o(i.GetDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaxTimeCredits
</UL>

<P><STRONG><a name="[362]"></a>SetMaxTimeCredits</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, regioncommon.o(i.SetMaxTimeCredits))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeToMs
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeFromMs
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTimeCredits
</UL>

<P><STRONG><a name="[32a]"></a>UpdateTimeCredits</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, regioncommon.o(i.UpdateTimeCredits))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = UpdateTimeCredits &rArr; SetMaxTimeCredits &rArr; SysTimeToMs &rArr; RtcBkupRead &rArr; HAL_RTCEx_BKUPRead &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMaxTimeCredits
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
</UL>

<P><STRONG><a name="[1bf]"></a>FifoNext</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fifo.o(i.FifoNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoFull
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPush
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPop
</UL>

<P><STRONG><a name="[370]"></a>TimerExists</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timer.o(i.TimerExists))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[36c]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(i.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[371]"></a>TimerInsertTimer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(i.TimerInsertTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerInsertTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>

<P><STRONG><a name="[36d]"></a>TimerSetTimeout</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timer.o(i.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarm
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerElapsedTime
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>

<P><STRONG><a name="[16a]"></a>BoardUnusedIoInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.BoardUnusedIoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BoardUnusedIoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGStopMode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGStandbyMode
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_EnableDBGSleepMode
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[16c]"></a>SystemClockReConfig</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, board.o(i.SystemClockReConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemClockReConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitMcu
</UL>

<P><STRONG><a name="[336]"></a>RtcGetCalendarValue</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, rtc-board.o(i.RtcGetCalendarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetTimerContext
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerValue
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetTimerElapsedTime
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcGetCalendarTime
</UL>

<P><STRONG><a name="[356]"></a>SX1276GetPaSelect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276mb1mas-board.o(i.SX1276GetPaSelect))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>

<P><STRONG><a name="[34c]"></a>GetFskBandwidthRegValue</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, sx1276.o(i.GetFskBandwidthRegValue))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>

<P><STRONG><a name="[340]"></a>RxChainCalibration</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, sx1276.o(i.RxChainCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GpioWrite &rArr; GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ConvertPllStepToFreqInHz
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[354]"></a>SX1276ConvertFreqInHzToPllStep</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sx1276.o(i.SX1276ConvertFreqInHzToPllStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276ConvertFreqInHzToPllStep
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
</UL>

<P><STRONG><a name="[341]"></a>SX1276ConvertPllStepToFreqInHz</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, sx1276.o(i.SX1276ConvertPllStepToFreqInHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SX1276ConvertPllStepToFreqInHz
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[345]"></a>SX1276GetGfskTimeOnAirNumerator</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sx1276.o(i.SX1276GetGfskTimeOnAirNumerator))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276GetGfskTimeOnAirNumerator
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[347]"></a>SX1276GetLoRaBandwidthInHz</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sx1276.o(i.SX1276GetLoRaBandwidthInHz))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[346]"></a>SX1276GetLoRaTimeOnAirNumerator</STRONG> (Thumb, 176 bytes, Stack size 36 bytes, sx1276.o(i.SX1276GetLoRaTimeOnAirNumerator))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SX1276GetLoRaTimeOnAirNumerator
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[32]"></a>SX1276OnDio0Irq</STRONG> (Thumb, 862 bytes, Stack size 24 bytes, sx1276.o(i.SX1276OnDio0Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = SX1276OnDio0Irq &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>SX1276OnDio1Irq</STRONG> (Thumb, 448 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnDio1Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = SX1276OnDio1Irq &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetDio1PinState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>SX1276OnDio2Irq</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, sx1276.o(i.SX1276OnDio2Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = SX1276OnDio2Irq &rArr; TimerStop &rArr; TimerSetTimeout &rArr; RtcSetAlarm &rArr; RtcGetTimerElapsedTime &rArr; RtcGetCalendarValue &rArr; HAL_RTC_GetTime &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ConvertPllStepToFreqInHz
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>SX1276OnDio3Irq</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnDio3Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = SX1276OnDio3Irq &rArr; SX1276Write &rArr; SX1276WriteBuffer &rArr; GpioWrite &rArr; GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>SX1276OnDio4Irq</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sx1276.o(i.SX1276OnDio4Irq))
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[b3]"></a>SX1276OnTimeoutIrq</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, sx1276.o(i.SX1276OnTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = SX1276OnTimeoutIrq &rArr; SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(i.SX1276Init)
</UL>
<P><STRONG><a name="[34d]"></a>SX1276ReadFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx1276.o(i.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = SX1276ReadFifo &rArr; SX1276ReadBuffer &rArr; GpioWrite &rArr; GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[34a]"></a>SX1276SetOpMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetBoardTcxo
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[351]"></a>SX1276SetTx</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = SX1276SetTx &rArr; SX1276SetOpMode &rArr; SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioMcuInit &rArr; HAL_GPIO_Init &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[34e]"></a>SX1276WriteFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx1276.o(i.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = SX1276WriteFifo &rArr; SX1276WriteBuffer &rArr; GpioWrite &rArr; GpioMcuWrite &rArr; HAL_GPIO_WritePin &rArr; assert_failed &rArr; usb_printf &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[37b]"></a>stderr_putchar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(i.stderr_putchar))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[37a]"></a>stdout_putchar</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(i.stdout_putchar))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[39d]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[398]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[78]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[393]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[38a]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[121]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
